{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"ECS Deployer \u00b6 ECS Deployer allows you to easily deploy containerized applications to AWS ECS Fargate. It simplifies the process of creating task definitions, running pre-deployment tasks, setting up scheduled jobs, as well as service orchestration. Applications can easily and securely be deployed with a simple GitHub Action. Features \u00b6 Service creation/updating Scheduled Jobs/Cron Pre Deploy Tasks Spot Containers Automatic Logging Setup GitHub Actions support Seamless integration with Remote Shell to easily debug your application Resources ECS Deployer Manages \u00b6 ECS Services ECS Task Definitions EventBridge Scheduler Schedules and ScheduleGroup (For CronJobs) Creation only of CloudWatch Log Groups (if desired) Resources ECS Deployer DOES NOT manage \u00b6 ECS Cluster ECR Repositories/Registry SSM Secrets Load Balancers / Target Groups IAM Roles VPC Resources Example Config \u00b6 .ecsdeployer.yml project : simple-http cluster : default image : ecr : simple-http tag : \"{{ .ImageTag }}\" task_defaults : cpu : 512 memory : 2x network : public_ip : false subnets : - subnet-111111111 - subnet-222222222 security_groups : - sg-111111111 - sg-222222222 services : - name : web command : [ \"httpd\" , \"-p\" , \"8080\" ] desired : 3 load_balancer : port : 8080 target_group : simple-http-web Basic Flow \u00b6 flowchart TD A[Start] --> B{{Has PreDeploy?}}; subgraph predeploy[Run PreDeploy Tasks] direction LR PD1 --> PD2[...] PD2 --> PDN end subgraph svc[Service Deployment] direction TB svc1[http] --> swait{{Wait for stability}} svc2[...] --> swait svc3[worker] --> swait cus{{Create/Update Services}} --> svc1 cus --> svc2 cus --> svc3 end B -->|Yes| predeploy; B -->|No|C{{Cronjobs}}; predeploy --> C; C --> svc; svc --> D{{Deregister Old Tasks}} D --> E[Success!]","title":"Home"},{"location":"#ecs-deployer","text":"ECS Deployer allows you to easily deploy containerized applications to AWS ECS Fargate. It simplifies the process of creating task definitions, running pre-deployment tasks, setting up scheduled jobs, as well as service orchestration. Applications can easily and securely be deployed with a simple GitHub Action.","title":"ECS Deployer"},{"location":"#features","text":"Service creation/updating Scheduled Jobs/Cron Pre Deploy Tasks Spot Containers Automatic Logging Setup GitHub Actions support Seamless integration with Remote Shell to easily debug your application","title":"Features"},{"location":"#resources-ecs-deployer-manages","text":"ECS Services ECS Task Definitions EventBridge Scheduler Schedules and ScheduleGroup (For CronJobs) Creation only of CloudWatch Log Groups (if desired)","title":"Resources ECS Deployer Manages"},{"location":"#example-config","text":".ecsdeployer.yml project : simple-http cluster : default image : ecr : simple-http tag : \"{{ .ImageTag }}\" task_defaults : cpu : 512 memory : 2x network : public_ip : false subnets : - subnet-111111111 - subnet-222222222 security_groups : - sg-111111111 - sg-222222222 services : - name : web command : [ \"httpd\" , \"-p\" , \"8080\" ] desired : 3 load_balancer : port : 8080 target_group : simple-http-web","title":"Example Config"},{"location":"#basic-flow","text":"flowchart TD A[Start] --> B{{Has PreDeploy?}}; subgraph predeploy[Run PreDeploy Tasks] direction LR PD1 --> PD2[...] PD2 --> PDN end subgraph svc[Service Deployment] direction TB svc1[http] --> swait{{Wait for stability}} svc2[...] --> swait svc3[worker] --> swait cus{{Create/Update Services}} --> svc1 cus --> svc2 cus --> svc3 end B -->|Yes| predeploy; B -->|No|C{{Cronjobs}}; predeploy --> C; C --> svc; svc --> D{{Deregister Old Tasks}} D --> E[Success!]","title":"Basic Flow"},{"location":"deprecations/","text":"Deprecations \u00b6 Features and/or options that are slated to be removed will be listed below. If you use one of those features and are not willing to migrate, then you will need to ensure you version lock your ECSDeployer installation, as newer versions will remove the feature. Legacy Cron \u00b6 The Cloudwatch Event Rule/Target based CronJob system has been deprecated. It has been replaced with EventBridge Scheduler . If you have already used ECSDeployer with Rule/Targets, you can use older versions or you can disable your cronjobs manually, and then deploy with ECS Deployer (which will set them up using the Scheduler). Once deployed, you can delete the old rules/targets. For a few versions of ECSDeployer, you can use settings.use_old_cron_eventbus: true to force using the old versions. Keep in mind this will be removed soon.","title":"Deprecations"},{"location":"deprecations/#deprecations","text":"Features and/or options that are slated to be removed will be listed below. If you use one of those features and are not willing to migrate, then you will need to ensure you version lock your ECSDeployer installation, as newer versions will remove the feature.","title":"Deprecations"},{"location":"deprecations/#legacy-cron","text":"The Cloudwatch Event Rule/Target based CronJob system has been deprecated. It has been replaced with EventBridge Scheduler . If you have already used ECSDeployer with Rule/Targets, you can use older versions or you can disable your cronjobs manually, and then deploy with ECS Deployer (which will set them up using the Scheduler). Once deployed, you can delete the old rules/targets. For a few versions of ECSDeployer, you can use settings.use_old_cron_eventbus: true to force using the old versions. Keep in mind this will be removed soon.","title":"Legacy Cron"},{"location":"help/","text":"Getting Help \u00b6 GitHub Discussions \u00b6 For general help and support, please post a topic on the Github Discussions . Bug Reports \u00b6 For bug reports, please post an issue on the bug tracker. Security Issues \u00b6 See Security policy .","title":"Getting Help"},{"location":"help/#getting-help","text":"","title":"Getting Help"},{"location":"help/#github-discussions","text":"For general help and support, please post a topic on the Github Discussions .","title":"GitHub Discussions"},{"location":"help/#bug-reports","text":"For bug reports, please post an issue on the bug tracker.","title":"Bug Reports"},{"location":"help/#security-issues","text":"See Security policy .","title":"Security Issues"},{"location":"install/","text":"Install \u00b6 Generally, ECS Deployer should be run from your Continuous Integration/Continuous Deployment system (like GitHub Actions ). However, if you would like to install the app you have the options listed below. Install on CI/CD Services \u00b6 Using ECS Deployer on CI/CD is the preferred method! GitHub Actions Install the pre-compiled binary \u00b6 homebrew tap \u00b6 brew install ecsdeployer/tap/ecsdeployer scoop \u00b6 scoop bucket add ecsdeployer https://github.com/ecsdeployer/scoop-bucket.git scoop install ecsdeployer deb, rpm and apk packages \u00b6 Download the .deb , .rpm or .apk packages from the latest release on GitHub and install them with the appropriate tools. go install \u00b6 go install ecsdeployer.com/ecsdeployer@latest bash script \u00b6 curl -sfL https://ecsdeployer.com/run.sh | bash -s -- deploy --config CONFIGFILE This is not installing ECS Deployer. This will only run the app. Compiling from source \u00b6 If you just want to build from source for whatever reason, follow these steps: clone: git clone https://github.com/ecsdeployer/ecsdeployer cd ecsdeployer get the dependencies: go mod tidy build: go build -o ecsdeployer . verify it works: ./ecsdeployer --version","title":"Install"},{"location":"install/#install","text":"Generally, ECS Deployer should be run from your Continuous Integration/Continuous Deployment system (like GitHub Actions ). However, if you would like to install the app you have the options listed below.","title":"Install"},{"location":"install/#install-on-cicd-services","text":"Using ECS Deployer on CI/CD is the preferred method! GitHub Actions","title":"Install on CI/CD Services"},{"location":"install/#install-the-pre-compiled-binary","text":"","title":"Install the pre-compiled binary"},{"location":"install/#homebrew-tap","text":"brew install ecsdeployer/tap/ecsdeployer","title":"homebrew tap"},{"location":"install/#scoop","text":"scoop bucket add ecsdeployer https://github.com/ecsdeployer/scoop-bucket.git scoop install ecsdeployer","title":"scoop"},{"location":"install/#deb-rpm-and-apk-packages","text":"Download the .deb , .rpm or .apk packages from the latest release on GitHub and install them with the appropriate tools.","title":"deb, rpm and apk packages"},{"location":"install/#go-install","text":"go install ecsdeployer.com/ecsdeployer@latest","title":"go install"},{"location":"install/#bash-script","text":"curl -sfL https://ecsdeployer.com/run.sh | bash -s -- deploy --config CONFIGFILE This is not installing ECS Deployer. This will only run the app.","title":"bash script"},{"location":"install/#compiling-from-source","text":"If you just want to build from source for whatever reason, follow these steps: clone: git clone https://github.com/ecsdeployer/ecsdeployer cd ecsdeployer get the dependencies: go mod tidy build: go build -o ecsdeployer . verify it works: ./ecsdeployer --version","title":"Compiling from source"},{"location":"limitations/","text":"Limitations \u00b6 Current Limitations \u00b6 No Automatic Rollback. \u00b6 If there is a problem during deployment (or a task is failing), then the deployment will halt, but it will not attempt to revert to a previous version. You will need to run the deployer again and point to a prior version. Only Fargate/FargateSpot is supported. \u00b6 You could use this to deploy to an EC2 based cluster, but all your tasks would need to conform to Fargate requirements. (So no placement strategies, local volumes, bridge network, etc) Limited validations / Ability for invalid AWS deployments \u00b6 To allow the most flexibility, the deployer does not verify every option you provide. It will allow invalid configurations that will then fail to deploy on AWS. (ex: using a 16 core cpu on old platform versions, referencing roles that do not exist, clusters that do not exist.) This flexibility is allowed so that if AWS updates settings, you will be able to use those immediately without an update. But the tradeoff is you are reponsible for ensuring you have a valid configuration. Obvious errors will still be validated. These are mostly limited to logical but unsupported configurations. If you try to make a network port be 70000, you'll still get an error. Windows is not supported \u00b6 Currently the \"Operating System\" option is forced to LINUX. Windows support will be added in the future. Only manages deployment-related infrastructure \u00b6 The focus of this app is to make repeated deployments easy and fast. It purposely does not try to manage the entirety of the infrastructure required for your app. You must create the constant resources (Load balancers, target groups, ECS cluster, ECR repository, roles, etc.). Managing those is outside the scope of this program for the time being. Planned Features \u00b6 ECS Service Registries AppMesh/Envoy Proxies Additional Sidecars Autoscaling EFS Volume Mounts Custom Container Logging (splunk, fluentd, etc) Linking Service with multiple load balancers Ability to override every possible option on a task (User, Ulimits, WorkDir, etc) Windows containers Pre/Post deploy hooks (run arbitrary commands) Possible Future Features \u00b6 Ability to launch tasks using EventBridge events as a trigger Using custom CapacityProviders More safeguards around invalid configurations.","title":"Limitations"},{"location":"limitations/#limitations","text":"","title":"Limitations"},{"location":"limitations/#current-limitations","text":"","title":"Current Limitations"},{"location":"limitations/#planned-features","text":"ECS Service Registries AppMesh/Envoy Proxies Additional Sidecars Autoscaling EFS Volume Mounts Custom Container Logging (splunk, fluentd, etc) Linking Service with multiple load balancers Ability to override every possible option on a task (User, Ulimits, WorkDir, etc) Windows containers Pre/Post deploy hooks (run arbitrary commands)","title":"Planned Features"},{"location":"limitations/#possible-future-features","text":"Ability to launch tasks using EventBridge events as a trigger Using custom CapacityProviders More safeguards around invalid configurations.","title":"Possible Future Features"},{"location":"quick_start/","text":"Quick Start \u00b6 1. Install ECS Deployer \u00b6 This step is only necessary if you will be running ECS Deployer locally or somewhere other than GitHub Actions. If you are using GitHub Actions, then please read our GitHub Actions documentation. Otherwise, see the Install page for more information. 2. Create a config file \u00b6 Create your Configuration File for your application. For applications with multiple environments/stages, you should place them in .ecsdeployer/<EnvironmentName>.yml . If your app only has a single environment/stage, you can use .ecsdeployer.yml (or you can use the extended path above) 3. Ensure your user/role has sufficient permission \u00b6 You will need the permissions listed on the IAM Permissions page. 4. Deploy! \u00b6 ecsdeployer deploy --config path/to/your/config.yml --image-tag v1.2.3","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"","title":"Quick Start"},{"location":"quick_start/#1-install-ecs-deployer","text":"This step is only necessary if you will be running ECS Deployer locally or somewhere other than GitHub Actions. If you are using GitHub Actions, then please read our GitHub Actions documentation. Otherwise, see the Install page for more information.","title":"1. Install ECS Deployer"},{"location":"quick_start/#2-create-a-config-file","text":"Create your Configuration File for your application. For applications with multiple environments/stages, you should place them in .ecsdeployer/<EnvironmentName>.yml . If your app only has a single environment/stage, you can use .ecsdeployer.yml (or you can use the extended path above)","title":"2. Create a config file"},{"location":"quick_start/#3-ensure-your-userrole-has-sufficient-permission","text":"You will need the permissions listed on the IAM Permissions page.","title":"3. Ensure your user/role has sufficient permission"},{"location":"quick_start/#4-deploy","text":"ecsdeployer deploy --config path/to/your/config.yml --image-tag v1.2.3","title":"4. Deploy!"},{"location":"templating/","text":"Templating \u00b6 The templating engine is powered by Go Templates . You can use any normal Go template operator within your template strings. Fields \u00b6 Common Fields \u00b6 These fields are available to all templates, everywhere. Note they must be wrapped in double curly braces. Key Description .Project the project name .Env.VARNAME a Map with all the current environment variables .Date current UTC date in RFC 3339 format .Timestamp current UTC time in Unix format .AppVersion the value you provided to --app-version (if you provided it) .Version an alias for .AppVersion .ImageTag the value you provided to --tag .Tag alias for .ImageTag .Image the value you provided to --image (a container image URI) .Cluster the name of the ECS Cluster the app will be deployed on .Stage the stage name for the application (i.e. \"production\", \"staging\", etc). You can specify this with stage: VALUE in the config file. IMPORTANT: Specifying a stage in your file WILL modify the naming conventions for your application. If you have already deployed, do not add this. See Naming to see how this will change the names of resources. AwsAccountId numeric AWS Account number (note the lack of . at the start) AwsRegion current AWS region (note the lack of . at the start) The following sections denote fields that are only available in certain contexts. Task Related \u00b6 These are only available within sections related to individual tasks (CronJobs, PreDeploy, Services). Key Description .Arch The architecture of the task. amd64 or arm64 .Name the task name you are referencing .Container the name of the individual container (will be the same as .Name for the primary container) Functions \u00b6 For all fields, you can use the following functions: Usage Description join \"sep\" \"x\" \"y\" \"z\" concatenates the 2nd thru last parameter using the 1st as a separator prefix \"value\" 4 only returns the first N characters of a string replace \"v1.2\" \"v\" \"\" replaces all matches. See ReplaceAll split \"1.2\" \".\" split string at separator. See Split time \"01/02/2006\" current UTC time in the specified format (this is not deterministic, a new time will be returned for every call) tolower \"V1.2\" makes input string lowercase. See ToLower toupper \"v1.2\" makes input string uppercase. See ToUpper trim \" v1.2 \" removes all leading and trailing white space. See TrimSpace trimprefix \"v1.2\" \"v\" removes provided leading prefix string, if present. See TrimPrefix trimsuffix \"1.2v\" \"v\" removes provided trailing suffix string, if present. See TrimSuffix","title":"Templating"},{"location":"templating/#templating","text":"The templating engine is powered by Go Templates . You can use any normal Go template operator within your template strings.","title":"Templating"},{"location":"templating/#fields","text":"","title":"Fields"},{"location":"templating/#common-fields","text":"These fields are available to all templates, everywhere. Note they must be wrapped in double curly braces. Key Description .Project the project name .Env.VARNAME a Map with all the current environment variables .Date current UTC date in RFC 3339 format .Timestamp current UTC time in Unix format .AppVersion the value you provided to --app-version (if you provided it) .Version an alias for .AppVersion .ImageTag the value you provided to --tag .Tag alias for .ImageTag .Image the value you provided to --image (a container image URI) .Cluster the name of the ECS Cluster the app will be deployed on .Stage the stage name for the application (i.e. \"production\", \"staging\", etc). You can specify this with stage: VALUE in the config file. IMPORTANT: Specifying a stage in your file WILL modify the naming conventions for your application. If you have already deployed, do not add this. See Naming to see how this will change the names of resources. AwsAccountId numeric AWS Account number (note the lack of . at the start) AwsRegion current AWS region (note the lack of . at the start) The following sections denote fields that are only available in certain contexts.","title":"Common Fields"},{"location":"templating/#task-related","text":"These are only available within sections related to individual tasks (CronJobs, PreDeploy, Services). Key Description .Arch The architecture of the task. amd64 or arm64 .Name the task name you are referencing .Container the name of the individual container (will be the same as .Name for the primary container)","title":"Task Related"},{"location":"templating/#functions","text":"For all fields, you can use the following functions: Usage Description join \"sep\" \"x\" \"y\" \"z\" concatenates the 2nd thru last parameter using the 1st as a separator prefix \"value\" 4 only returns the first N characters of a string replace \"v1.2\" \"v\" \"\" replaces all matches. See ReplaceAll split \"1.2\" \".\" split string at separator. See Split time \"01/02/2006\" current UTC time in the specified format (this is not deterministic, a new time will be returned for every call) tolower \"V1.2\" makes input string lowercase. See ToLower toupper \"v1.2\" makes input string uppercase. See ToUpper trim \" v1.2 \" removes all leading and trailing white space. See TrimSpace trimprefix \"v1.2\" \"v\" removes provided leading prefix string, if present. See TrimPrefix trimsuffix \"1.2v\" \"v\" removes provided trailing suffix string, if present. See TrimSuffix","title":"Functions"},{"location":"aws/iam/","text":"AWS IAM Permissions \u00b6 Below are two default policies that you can use for ECS Deployer. Normal Policy (recommended) Restrictive Policy Cron Launcher Policy This policy is less restrictive, but will let you reuse a single role for all projects using the ECS Deployer. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"EnvInfoGathering\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ec2:DescribeVpcs\" , \"ec2:DescribeSubnets\" , \"ec2:DescribeSecurityGroups\" , \"elasticloadbalancing:DescribeTargetGroups\" , \"logs:DescribeLogGroups\" , \"tag:GetResources\" , \"scheduler:ListSchedules\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"TaskDefinitions\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:RegisterTaskDefinition\" , \"ecs:DeregisterTaskDefinition\" , \"ecs:ListTaskDefinitionFamilies\" , \"ecs:ListTaskDefinitions\" , \"ecs:DescribeTaskDefinition\" ], \"Resource\" : \"*\" }, { \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:DescribeTasks\" , \"ecs:DescribeServices\" , \"ecs:UpdateService\" , \"ecs:DeleteService\" , \"ecs:CreateService\" , \"ecs:RunTask\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"CronSetup\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"scheduler:GetSchedule\" , \"scheduler:UpdateSchedule\" , \"scheduler:CreateSchedule\" , \"scheduler:DeleteSchedule\" , \"scheduler:GetScheduleGroup\" , \"scheduler:CreateScheduleGroup\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"ImportSSMParams\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ssm:GetParametersByPath\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"Logging\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogGroup\" , \"logs:PutRetentionPolicy\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"TagManagement\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:TagLogGroup\" , \"ecs:TagResource\" , \"scheduler:TagResource\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"RolePassing\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"*\" , \"Condition\" : { \"StringLike\" : { \"iam:PassedToService\" : [ \"ecs-tasks.amazonaws.com\" , \"scheduler.amazonaws.com\" ] } } } ] } Grant (Trust Relationships) \u00b6 { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"AllowFromGithubActions\" , \"Effect\" : \"Allow\" , \"Action\" : \"sts:AssumeRoleWithWebIdentity\" , \"Principal\" : { \"Federated\" : \"arn:aws:iam::ACCOUNTID:oidc-provider/token.actions.githubusercontent.com\" }, \"Condition\" : { \"StringEquals\" : { \"token.actions.githubusercontent.com:aud\" : \"sts.amazonaws.com\" }, \"StringLike\" : { \"token.actions.githubusercontent.com:sub\" : \"repo:YOUR_GITHUB_ORG/*\" } } } ] } Make sure to replace the placeholders! These examples contain placeholders meant for you to replace with values for your environment. These are the placeholders: REGION - The AWS region short code ( us-east-1 , us-west-2 ) ACCOUNTID - Your numerical AWS Account ID CLUSTER_NAME - Name of the ECS cluster specified for cluster PROJECT_NAME - Value of project APP_ROLE - Role you used for role ECS_EXECUTION_ROLE - Role you used for execution_role CRON_LAUNCHER_ROLE - Role you used for cron_launcher_role { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"EnvInfoGathering\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ec2:DescribeVpcs\" , \"ec2:DescribeSubnets\" , \"ec2:DescribeSecurityGroups\" , \"elasticloadbalancing:DescribeTargetGroups\" , \"logs:DescribeLogGroups\" , \"tag:GetResources\" , \"scheduler:ListSchedules\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"TaskDefinitions\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:RegisterTaskDefinition\" , \"ecs:DeregisterTaskDefinition\" , \"ecs:ListTaskDefinitionFamilies\" , \"ecs:ListTaskDefinitions\" , \"ecs:DescribeTaskDefinition\" ], \"Resource\" : \"*\" }, { \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:DescribeTasks\" , \"ecs:DescribeServices\" ], \"Resource\" : \"*\" , \"Condition\" : { \"ArnEquals\" : { \"ecs:cluster\" : \"arn:aws:ecs:REGION:ACCOUNTID:cluster/CLUSTER_NAME\" } } }, { \"Sid\" : \"ServiceDeployment\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:UpdateService\" , \"ecs:DeleteService\" ], \"Resource\" : \"arn:aws:ecs:REGION:ACCOUNTID:service/CLUSTER_NAME/PROJECT_NAME-*\" , \"Condition\" : { \"ArnEquals\" : { \"ecs:cluster\" : \"arn:aws:ecs:REGION:ACCOUNTID:cluster/CLUSTER_NAME\" } } }, { \"Sid\" : \"ServiceCreation\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:CreateService\" ], \"Resource\" : \"arn:aws:ecs:REGION:ACCOUNTID:service/CLUSTER_NAME/PROJECT_NAME-*\" , \"Condition\" : { \"ArnEquals\" : { \"ecs:cluster\" : \"arn:aws:ecs:REGION:ACCOUNTID:cluster/CLUSTER_NAME\" }, \"StringEquals\" : { \"aws:RequestTag/ecsdeployer/project\" : [ \"PROJECT_NAME\" ] } } }, { \"Sid\" : \"ResourceTaggingECS\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:TagResource\" ], \"Resource\" : [ \"arn:aws:ecs:REGION:ACCOUNTID:service/CLUSTER_NAME/PROJECT_NAME-*\" , \"arn:aws:ecs:REGION:ACCOUNTID:task-definition/PROJECT_NAME-*\" ] }, { \"Sid\" : \"PreDeployTasks\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:RunTask\" ], \"Resource\" : \"*\" , \"Condition\" : { \"ArnEquals\" : { \"ecs:cluster\" : \"arn:aws:ecs:REGION:ACCOUNTID:cluster/CLUSTER_NAME\" } } }, { \"Sid\" : \"ImportSSMParams\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ssm:GetParametersByPath\" ], \"Resource\" : \"arn:aws:ssm:*:*:parameter/ecsdeployer/secrets/PROJECT_NAME/*\" }, { \"Sid\" : \"Logging\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogGroup\" , \"logs:PutRetentionPolicy\" , \"logs:TagLogGroup\" ], \"Resource\" : [ \"arn:aws:logs:REGION:ACCOUNTID:log-group:/ecsdeployer/app/PROJECT_NAME*\" , \"arn:aws:logs:REGION:ACCOUNTID:log-group:/ecsdeployer/app/PROJECT_NAME*:*\" ] }, { \"Sid\" : \"CronSetup\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"scheduler:GetSchedule\" , \"scheduler:UpdateSchedule\" , \"scheduler:CreateSchedule\" , \"scheduler:DeleteSchedule\" ], \"Resource\" : \"arn:aws:scheduler:*:*:schedule/PROJECT_NAME/*\" }, { \"Sid\" : \"CronSetupGroup\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"scheduler:GetScheduleGroup\" , \"scheduler:CreateScheduleGroup\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"EcsPassRole\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : [ \"arn:aws:iam::ACCOUNTID:role/APP_ROLE\" , \"arn:aws:iam::ACCOUNTID:role/ECS_EXECUTION_ROLE\" ], \"Condition\" : { \"StringLike\" : { \"iam:PassedToService\" : [ \"ecs-tasks.amazonaws.com\" ] } } }, { \"Sid\" : \"CronPassRole\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : [ \"arn:aws:iam::ACCOUNTID:role/CRON_LAUNCHER_ROLE\" ], \"Condition\" : { \"StringLike\" : { \"iam:PassedToService\" : [ \"scheduler.amazonaws.com\" ] } } } ] } { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:RunTask\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"RolePassing\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"*\" , \"Condition\" : { \"StringLike\" : { \"iam:PassedToService\" : [ \"ecs-tasks.amazonaws.com\" ] } } } ] } Grant (Trust Relationships) \u00b6 { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"AllowFromScheduler\" , \"Effect\" : \"Allow\" , \"Action\" : \"sts:AssumeRole\" , \"Principal\" : { \"Service\" : \"scheduler.amazonaws.com\" }, \"Condition\" : { \"StringEquals\" : { \"aws:SourceAccount\" : \"ACCOUNTID\" } } }, { \"Sid\" : \"DeprecatedAllowFromEventbridge\" , \"Effect\" : \"Allow\" , \"Action\" : \"sts:AssumeRole\" , \"Principal\" : { \"Service\" : \"events.amazonaws.com\" } } ] }","title":"IAM Permissions"},{"location":"aws/iam/#aws-iam-permissions","text":"Below are two default policies that you can use for ECS Deployer. Normal Policy (recommended) Restrictive Policy Cron Launcher Policy This policy is less restrictive, but will let you reuse a single role for all projects using the ECS Deployer. { \"Version\" : \"2012-10-17\" , \"Statement\" : [ { \"Sid\" : \"EnvInfoGathering\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ec2:DescribeVpcs\" , \"ec2:DescribeSubnets\" , \"ec2:DescribeSecurityGroups\" , \"elasticloadbalancing:DescribeTargetGroups\" , \"logs:DescribeLogGroups\" , \"tag:GetResources\" , \"scheduler:ListSchedules\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"TaskDefinitions\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:RegisterTaskDefinition\" , \"ecs:DeregisterTaskDefinition\" , \"ecs:ListTaskDefinitionFamilies\" , \"ecs:ListTaskDefinitions\" , \"ecs:DescribeTaskDefinition\" ], \"Resource\" : \"*\" }, { \"Effect\" : \"Allow\" , \"Action\" : [ \"ecs:DescribeTasks\" , \"ecs:DescribeServices\" , \"ecs:UpdateService\" , \"ecs:DeleteService\" , \"ecs:CreateService\" , \"ecs:RunTask\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"CronSetup\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"scheduler:GetSchedule\" , \"scheduler:UpdateSchedule\" , \"scheduler:CreateSchedule\" , \"scheduler:DeleteSchedule\" , \"scheduler:GetScheduleGroup\" , \"scheduler:CreateScheduleGroup\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"ImportSSMParams\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"ssm:GetParametersByPath\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"Logging\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:CreateLogGroup\" , \"logs:PutRetentionPolicy\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"TagManagement\" , \"Effect\" : \"Allow\" , \"Action\" : [ \"logs:TagLogGroup\" , \"ecs:TagResource\" , \"scheduler:TagResource\" ], \"Resource\" : \"*\" }, { \"Sid\" : \"RolePassing\" , \"Effect\" : \"Allow\" , \"Action\" : \"iam:PassRole\" , \"Resource\" : \"*\" , \"Condition\" : { \"StringLike\" : { \"iam:PassedToService\" : [ \"ecs-tasks.amazonaws.com\" , \"scheduler.amazonaws.com\" ] } } } ] }","title":"AWS IAM Permissions"},{"location":"ci/github/","text":"GitHub Actions \u00b6 ECS Deployer can also be used on GitHub Actions using our official action . Usage \u00b6 Tip For the most up-to-date info, please visit the ECS Deployer GitHub Action page. Recommend Directory Structure \u00b6 Default Using Stages <repo root> \u251c\u2500\u2500 .ecsdeployer.yml \u2514\u2500\u2500 .github \u2514\u2500\u2500 workflows \u2514\u2500\u2500 deploy.yml <repo root> \u251c\u2500\u2500 .ecsdeployer \u2502 \u251c\u2500\u2500 beta.yml \u2502 \u251c\u2500\u2500 production.yml \u2502 \u2514\u2500\u2500 staging.yml \u2514\u2500\u2500 .github \u2514\u2500\u2500 workflows \u2514\u2500\u2500 deploy.yml Configuring \u00b6 Action Inputs \u00b6 config Path to the configuration file that will be used for deploying your application. Default : .ecsdeployer.yml image Sets the container image URI to use as the primary image. If you pass this, you should not define an image section on your project root. If provide this parameter and have an image section defined, the section in the file will win. image-tag Optional value passed as --image-tag to deployment. This is used for the {{ .Tag }} template variable. Default : (not set) app-version Optional value passed as --app-version to deployment. This is used for the {{ .AppVersion }} template variable. Default : (not set) extra-args Additional arguments to pass to the deploy command Default : (none) workdir Working directory (below repository root) Default : . timeout Sets the timeout for the entire deployment process. Default : (not set - use the default timeout for ECS Deployer) install-only Just install ECS Deployer, and then exit Default : false ecsdeployer-version Override the version of ECSDeployer to run. Default : latest Example Workflow \u00b6 .github/workflows/deploy.yml .github/workflows/deploy.yml name : \"Deploy\" on : push : tags : - 'v**' # only 1 deployment at a time. (optional) concurrency : ecsdeployer permissions : contents : read # this is only needed if you are using OIDC auth for your AWS Role. # If you are using AWS, you should definitely set this up! id-token : write jobs : deploy : runs-on : ubuntu-latest steps : - name : Checkout uses : actions/checkout@v3 - name : Configure AWS Credentials uses : aws-actions/configure-aws-credentials@v1 with : role-to-assume : arn:aws:iam::12345678910:role/deployment-role aws-region : us-east-1 - name : Login to Amazon ECR id : login-ecr uses : aws-actions/amazon-ecr-login@v1 - name : Set up QEMU uses : docker/setup-qemu-action@v2 - name : Setup up Docker Buildx uses : docker/setup-buildx-action@v2 - name : Build Push uses : docker/build-push-action@v3 with : push : true tags : ${{ steps.login-ecr.outputs.registry }}/myapp:${{ github.ref_name }} - name : Deploy uses : ecsdeployer/github-action@v1 with : image : ${{ steps.login-ecr.outputs.registry }}/myapp:${{ github.ref_name }} Download this file Further Reading \u00b6 GitHub Actions Workflow Syntax aws-actions/configure-aws-credentials Configuring OpenID Connect in Amazon Web Services","title":"GitHub Actions"},{"location":"ci/github/#github-actions","text":"ECS Deployer can also be used on GitHub Actions using our official action .","title":"GitHub Actions"},{"location":"ci/github/#usage","text":"Tip For the most up-to-date info, please visit the ECS Deployer GitHub Action page.","title":"Usage"},{"location":"ci/github/#recommend-directory-structure","text":"Default Using Stages <repo root> \u251c\u2500\u2500 .ecsdeployer.yml \u2514\u2500\u2500 .github \u2514\u2500\u2500 workflows \u2514\u2500\u2500 deploy.yml <repo root> \u251c\u2500\u2500 .ecsdeployer \u2502 \u251c\u2500\u2500 beta.yml \u2502 \u251c\u2500\u2500 production.yml \u2502 \u2514\u2500\u2500 staging.yml \u2514\u2500\u2500 .github \u2514\u2500\u2500 workflows \u2514\u2500\u2500 deploy.yml","title":"Recommend Directory Structure"},{"location":"ci/github/#configuring","text":"","title":"Configuring"},{"location":"ci/github/#action-inputs","text":"config Path to the configuration file that will be used for deploying your application. Default : .ecsdeployer.yml image Sets the container image URI to use as the primary image. If you pass this, you should not define an image section on your project root. If provide this parameter and have an image section defined, the section in the file will win. image-tag Optional value passed as --image-tag to deployment. This is used for the {{ .Tag }} template variable. Default : (not set) app-version Optional value passed as --app-version to deployment. This is used for the {{ .AppVersion }} template variable. Default : (not set) extra-args Additional arguments to pass to the deploy command Default : (none) workdir Working directory (below repository root) Default : . timeout Sets the timeout for the entire deployment process. Default : (not set - use the default timeout for ECS Deployer) install-only Just install ECS Deployer, and then exit Default : false ecsdeployer-version Override the version of ECSDeployer to run. Default : latest","title":"Action Inputs"},{"location":"ci/github/#example-workflow","text":".github/workflows/deploy.yml .github/workflows/deploy.yml name : \"Deploy\" on : push : tags : - 'v**' # only 1 deployment at a time. (optional) concurrency : ecsdeployer permissions : contents : read # this is only needed if you are using OIDC auth for your AWS Role. # If you are using AWS, you should definitely set this up! id-token : write jobs : deploy : runs-on : ubuntu-latest steps : - name : Checkout uses : actions/checkout@v3 - name : Configure AWS Credentials uses : aws-actions/configure-aws-credentials@v1 with : role-to-assume : arn:aws:iam::12345678910:role/deployment-role aws-region : us-east-1 - name : Login to Amazon ECR id : login-ecr uses : aws-actions/amazon-ecr-login@v1 - name : Set up QEMU uses : docker/setup-qemu-action@v2 - name : Setup up Docker Buildx uses : docker/setup-buildx-action@v2 - name : Build Push uses : docker/build-push-action@v3 with : push : true tags : ${{ steps.login-ecr.outputs.registry }}/myapp:${{ github.ref_name }} - name : Deploy uses : ecsdeployer/github-action@v1 with : image : ${{ steps.login-ecr.outputs.registry }}/myapp:${{ github.ref_name }} Download this file","title":"Example Workflow"},{"location":"ci/github/#further-reading","text":"GitHub Actions Workflow Syntax aws-actions/configure-aws-credentials Configuring OpenID Connect in Amazon Web Services","title":"Further Reading"},{"location":"cmd/ecsdeployer/","text":"ecsdeployer \u00b6 Deploy applications to Fargate Synopsis \u00b6 ECS Deployer allows you to easily deploy containerized applications to AWS ECS Fargate. It simplifies the process of creating task definitions, running pre-deployment tasks, setting up scheduled jobs, as well as service orchestration. Applications can easily and securely be deployed with a simple GitHub Action. Check out our website for more information, examples and documentation: https://ecsdeployer.com/ Options \u00b6 --debug Enable debug mode -h, --help help for ecsdeployer See also \u00b6 ecsdeployer check - Checks if configuration is valid, validating it against the schema ecsdeployer clean - Runs the cleanup step only. Skips actual deployment ecsdeployer deploy - Deploys application ecsdeployer info - Gives an overview of your project and what things are enabled ecsdeployer jsonschema - outputs ECS Deployer's JSON schema","title":"ecsdeployer"},{"location":"cmd/ecsdeployer/#ecsdeployer","text":"Deploy applications to Fargate","title":"ecsdeployer"},{"location":"cmd/ecsdeployer/#synopsis","text":"ECS Deployer allows you to easily deploy containerized applications to AWS ECS Fargate. It simplifies the process of creating task definitions, running pre-deployment tasks, setting up scheduled jobs, as well as service orchestration. Applications can easily and securely be deployed with a simple GitHub Action. Check out our website for more information, examples and documentation: https://ecsdeployer.com/","title":"Synopsis"},{"location":"cmd/ecsdeployer/#options","text":"--debug Enable debug mode -h, --help help for ecsdeployer","title":"Options"},{"location":"cmd/ecsdeployer/#see-also","text":"ecsdeployer check - Checks if configuration is valid, validating it against the schema ecsdeployer clean - Runs the cleanup step only. Skips actual deployment ecsdeployer deploy - Deploys application ecsdeployer info - Gives an overview of your project and what things are enabled ecsdeployer jsonschema - outputs ECS Deployer's JSON schema","title":"See also"},{"location":"cmd/ecsdeployer_check/","text":"ecsdeployer check \u00b6 Checks if configuration is valid, validating it against the schema ecsdeployer check [flags] Options \u00b6 -c, --config string Configuration file to check -h, --help help for check -q, --quiet Quiet mode: no output Global Options \u00b6 --debug Enable debug mode See also \u00b6 ecsdeployer - Deploy applications to Fargate","title":"ecsdeployer check"},{"location":"cmd/ecsdeployer_check/#ecsdeployer-check","text":"Checks if configuration is valid, validating it against the schema ecsdeployer check [flags]","title":"ecsdeployer check"},{"location":"cmd/ecsdeployer_check/#options","text":"-c, --config string Configuration file to check -h, --help help for check -q, --quiet Quiet mode: no output","title":"Options"},{"location":"cmd/ecsdeployer_check/#global-options","text":"--debug Enable debug mode","title":"Global Options"},{"location":"cmd/ecsdeployer_check/#see-also","text":"ecsdeployer - Deploy applications to Fargate","title":"See also"},{"location":"cmd/ecsdeployer_clean/","text":"ecsdeployer clean \u00b6 Runs the cleanup step only. Skips actual deployment Synopsis \u00b6 Use this command to purge any unused services, cronjobs, task definitions, etc from your environment that are no longer being referenced in your configuration file. ecsdeployer clean [flags] Options \u00b6 --app-version string Set the application version. Useful for templates -c, --config string Configuration file to check -h, --help help for clean --image string Specify a container image URI. -q, --quiet Quiet mode: no output --tag string Specify a custom image tag to use. --timeout duration Timeout for the entire cleanup process (default 30m0s) Global Options \u00b6 --debug Enable debug mode See also \u00b6 ecsdeployer - Deploy applications to Fargate","title":"ecsdeployer clean"},{"location":"cmd/ecsdeployer_clean/#ecsdeployer-clean","text":"Runs the cleanup step only. Skips actual deployment","title":"ecsdeployer clean"},{"location":"cmd/ecsdeployer_clean/#synopsis","text":"Use this command to purge any unused services, cronjobs, task definitions, etc from your environment that are no longer being referenced in your configuration file. ecsdeployer clean [flags]","title":"Synopsis"},{"location":"cmd/ecsdeployer_clean/#options","text":"--app-version string Set the application version. Useful for templates -c, --config string Configuration file to check -h, --help help for clean --image string Specify a container image URI. -q, --quiet Quiet mode: no output --tag string Specify a custom image tag to use. --timeout duration Timeout for the entire cleanup process (default 30m0s)","title":"Options"},{"location":"cmd/ecsdeployer_clean/#global-options","text":"--debug Enable debug mode","title":"Global Options"},{"location":"cmd/ecsdeployer_clean/#see-also","text":"ecsdeployer - Deploy applications to Fargate","title":"See also"},{"location":"cmd/ecsdeployer_deploy/","text":"ecsdeployer deploy \u00b6 Deploys application ecsdeployer deploy [flags] Options \u00b6 --app-version string Set the application version. Useful for templates -c, --config string Configuration file to check -h, --help help for deploy --image string Specify a container image URI. -q, --quiet Quiet mode: no output --tag string Specify a custom image tag to use. --timeout duration Timeout for the entire deploy process (default 2h0m0s) Global Options \u00b6 --debug Enable debug mode See also \u00b6 ecsdeployer - Deploy applications to Fargate","title":"ecsdeployer deploy"},{"location":"cmd/ecsdeployer_deploy/#ecsdeployer-deploy","text":"Deploys application ecsdeployer deploy [flags]","title":"ecsdeployer deploy"},{"location":"cmd/ecsdeployer_deploy/#options","text":"--app-version string Set the application version. Useful for templates -c, --config string Configuration file to check -h, --help help for deploy --image string Specify a container image URI. -q, --quiet Quiet mode: no output --tag string Specify a custom image tag to use. --timeout duration Timeout for the entire deploy process (default 2h0m0s)","title":"Options"},{"location":"cmd/ecsdeployer_deploy/#global-options","text":"--debug Enable debug mode","title":"Global Options"},{"location":"cmd/ecsdeployer_deploy/#see-also","text":"ecsdeployer - Deploy applications to Fargate","title":"See also"},{"location":"cmd/ecsdeployer_info/","text":"ecsdeployer info \u00b6 Gives an overview of your project and what things are enabled ecsdeployer info [flags] Options \u00b6 --app-version string Set the application version. Useful for templates -c, --config string Configuration file to check -h, --help help for info --image string Specify a container image URI. --tag string Specify a custom image tag to use. Global Options \u00b6 --debug Enable debug mode See also \u00b6 ecsdeployer - Deploy applications to Fargate","title":"ecsdeployer info"},{"location":"cmd/ecsdeployer_info/#ecsdeployer-info","text":"Gives an overview of your project and what things are enabled ecsdeployer info [flags]","title":"ecsdeployer info"},{"location":"cmd/ecsdeployer_info/#options","text":"--app-version string Set the application version. Useful for templates -c, --config string Configuration file to check -h, --help help for info --image string Specify a container image URI. --tag string Specify a custom image tag to use.","title":"Options"},{"location":"cmd/ecsdeployer_info/#global-options","text":"--debug Enable debug mode","title":"Global Options"},{"location":"cmd/ecsdeployer_info/#see-also","text":"ecsdeployer - Deploy applications to Fargate","title":"See also"},{"location":"cmd/ecsdeployer_jsonschema/","text":"ecsdeployer jsonschema \u00b6 outputs ECS Deployer's JSON schema ecsdeployer jsonschema [flags] Options \u00b6 -h, --help help for jsonschema -o, --output string where to save the json schema (default \"-\") Global Options \u00b6 --debug Enable debug mode See also \u00b6 ecsdeployer - Deploy applications to Fargate","title":"ecsdeployer jsonschema"},{"location":"cmd/ecsdeployer_jsonschema/#ecsdeployer-jsonschema","text":"outputs ECS Deployer's JSON schema ecsdeployer jsonschema [flags]","title":"ecsdeployer jsonschema"},{"location":"cmd/ecsdeployer_jsonschema/#options","text":"-h, --help help for jsonschema -o, --output string where to save the json schema (default \"-\")","title":"Options"},{"location":"cmd/ecsdeployer_jsonschema/#global-options","text":"--debug Enable debug mode","title":"Global Options"},{"location":"cmd/ecsdeployer_jsonschema/#see-also","text":"ecsdeployer - Deploy applications to Fargate","title":"See also"},{"location":"config/","text":"Configuration File \u00b6 The configuration file is what you will use to define your application's ECS resources, scheduled jobs, predeploy tasks, etc. Recommended Locations \u00b6 .ecsdeployer.yml .ecsdeployer/[STAGE].yml (if using stages) Essential Sections \u00b6 Basics Defining Services Specifying Network Settings Schedule Tasks/Cron Examples \u00b6 See example configuration files . Schema \u00b6 Download schema.json","title":"About"},{"location":"config/#configuration-file","text":"The configuration file is what you will use to define your application's ECS resources, scheduled jobs, predeploy tasks, etc.","title":"Configuration File"},{"location":"config/#recommended-locations","text":".ecsdeployer.yml .ecsdeployer/[STAGE].yml (if using stages)","title":"Recommended Locations"},{"location":"config/#essential-sections","text":"Basics Defining Services Specifying Network Settings Schedule Tasks/Cron","title":"Essential Sections"},{"location":"config/#examples","text":"See example configuration files .","title":"Examples"},{"location":"config/#schema","text":"Download schema.json","title":"Schema"},{"location":"config/basic/","text":"Configuration Root Fields \u00b6 # .ecsdeployer.yml project : myapp cluster : mycluster image : ... role : ... services : - ... cronjobs : - ... settings : ... # ... Fields \u00b6 project - (required) The project name will be used to construct the names of all tasks. It should be short, and should only contain letters, numbers, dashes project : deployer-test cluster - (required) You must specify a cluster key that provides either an ECS Cluster name or ARN. Using Name Only Using ARN cluster : mycluster cluster : arn:aws:ecs:us-east-1:1234567890:cluster/mycluster image - (recommended) See Specifying Container Image below. role - (recommended) This is the application role (Task Role). This is what your application will use when it is running normally. This is highly recommended, although not required. You can specify roles using the full ARN or the name of the role. Roles must already exist, they will not be created for you. execution_role - (required) This is the role that AWS ECS will use to run your tasks. Read more: Amazon ECS task execution IAM You can specify roles using the full ARN or the name of the role. Roles must already exist, they will not be created for you. cron_launcher_role - (required if using CronJobs ) This is the role that EventBridge Scheduler will use to launch your task based on the schedule you specify. You can specify roles using the full ARN or the name of the role. Roles must already exist, they will not be created for you. An example policy can be seen on the AWS IAM Permissions page. service_role If you need to set a Service-Linked role , you can specify it here. Once you create a service with this role, you cannot change it. You will need to manually delete the service and redeploy. Note: This is a very non-standard thing. Unless you explicitly need this, you should leave this field blank. network - (required) See Networking services - (recommended) See Services This is not required, but if you don't provide it... why even use this project? cronjobs See CronJobs predeploy See PreDeploy Tasks console See Remote Shell environment See Environment Variables task_defaults See Task Defaults name_templates See Naming logging See Logging tags Specify a set of tags that will be applied to all resources. See Tags Documentation for more information settings See Settings Specifying Container Image \u00b6 Specifying as an object Specifying as a string image : ecr : myapp tag : \"{{ .ImageTag }}\" ecr The AWS Elastic Container Repository to pull from. You can specify this as: a name (which will be converted to a full URL for you) a full hostname/path Conflicts with docker docker Reference a DockerHub repository. Conflicts with ecr tag Pulls an image using its tag. This is the most common usage. Examples: latest , v1.2.3 Default : {{ .ImageTag }} (what you pass in as --image-tag ) Conflicts with digest digest Pulls an image using its digest value. Should be in the format of sha256:<hexvalue> Conflicts with tag Note: You may use templates in all fields. You can specify the full URI to a container image as a string. You may use templates in the string. Examples: image : \"01234567890.dkr.ecr.REGION.amazonaws.com/thing/stuff:latest\" image : \"01234567890.dkr.ecr.REGION.amazonaws.com/thing/stuff:{{ .ImageTag }}\" image : \"nginx:1.2.3\"","title":"Basics"},{"location":"config/basic/#configuration-root-fields","text":"# .ecsdeployer.yml project : myapp cluster : mycluster image : ... role : ... services : - ... cronjobs : - ... settings : ... # ...","title":"Configuration Root Fields"},{"location":"config/basic/#fields","text":"project - (required) The project name will be used to construct the names of all tasks. It should be short, and should only contain letters, numbers, dashes project : deployer-test cluster - (required) You must specify a cluster key that provides either an ECS Cluster name or ARN. Using Name Only Using ARN cluster : mycluster cluster : arn:aws:ecs:us-east-1:1234567890:cluster/mycluster image - (recommended) See Specifying Container Image below. role - (recommended) This is the application role (Task Role). This is what your application will use when it is running normally. This is highly recommended, although not required. You can specify roles using the full ARN or the name of the role. Roles must already exist, they will not be created for you. execution_role - (required) This is the role that AWS ECS will use to run your tasks. Read more: Amazon ECS task execution IAM You can specify roles using the full ARN or the name of the role. Roles must already exist, they will not be created for you. cron_launcher_role - (required if using CronJobs ) This is the role that EventBridge Scheduler will use to launch your task based on the schedule you specify. You can specify roles using the full ARN or the name of the role. Roles must already exist, they will not be created for you. An example policy can be seen on the AWS IAM Permissions page. service_role If you need to set a Service-Linked role , you can specify it here. Once you create a service with this role, you cannot change it. You will need to manually delete the service and redeploy. Note: This is a very non-standard thing. Unless you explicitly need this, you should leave this field blank. network - (required) See Networking services - (recommended) See Services This is not required, but if you don't provide it... why even use this project? cronjobs See CronJobs predeploy See PreDeploy Tasks console See Remote Shell environment See Environment Variables task_defaults See Task Defaults name_templates See Naming logging See Logging tags Specify a set of tags that will be applied to all resources. See Tags Documentation for more information settings See Settings","title":"Fields"},{"location":"config/basic/#specifying-container-image","text":"Specifying as an object Specifying as a string image : ecr : myapp tag : \"{{ .ImageTag }}\" ecr The AWS Elastic Container Repository to pull from. You can specify this as: a name (which will be converted to a full URL for you) a full hostname/path Conflicts with docker docker Reference a DockerHub repository. Conflicts with ecr tag Pulls an image using its tag. This is the most common usage. Examples: latest , v1.2.3 Default : {{ .ImageTag }} (what you pass in as --image-tag ) Conflicts with digest digest Pulls an image using its digest value. Should be in the format of sha256:<hexvalue> Conflicts with tag Note: You may use templates in all fields. You can specify the full URI to a container image as a string. You may use templates in the string. Examples: image : \"01234567890.dkr.ecr.REGION.amazonaws.com/thing/stuff:latest\" image : \"01234567890.dkr.ecr.REGION.amazonaws.com/thing/stuff:{{ .ImageTag }}\" image : \"nginx:1.2.3\"","title":"Specifying Container Image"},{"location":"config/common/","text":"Shared Task Attributes \u00b6 The attributes below are available in the following sections: Services Remote Shell Task Defaults PreDeploy Tasks CronJobs Usage \u00b6 Task Defaults Services Cronjobs PreDeploy Tasks Remote Shell task_defaults : cpu : 1024 <something from Fields> : value task_defaults : cpu : 1024 services : - name : web <something from Fields> : value - name : important-jobs cpu : 4096 memory : 4x cronjobs : - name : reaper ... <something from Fields> : value predeploy : - name : dbmigrate ... <something from Fields> : value console : enabled : true ... <something from Fields> : value Fields \u00b6 arch Override the architecture of this task. Values are amd64 or arm64 . Default : amd64 command See Command/Entry Point cpu How many CPU shares are given to the task See CPU/Memory Resources Default : 1024 credentials See Private Registry entrypoint See Command/Entry Point environment Allows extra task-specific environment variables to be added. See Environment Variables image Allows you to override the image used for this task. See Image Documentation labels Add Docker Labels. Same structure as in the Tags Documentation . memory See CPU/Memory Resources Default : 2x mounts Specify mount points. See Volumes/Mounts . network Override network settings. See Network platform_version Override the Fargate Platform Version . Default : LATEST proxy See Proxy Configuration start_timeout See Start/Stop Timeouts stop_timeout See Start/Stop Timeouts storage Amount of storage to attach to the cluster (in GiB) See AWS Documentation on Fargate Storage healthcheck See Container Health Checks tags Additional tags to apply to this task. Same format as in the Tags Documentation . ulimits Specify limit overrides per container. See Ulimits for more details. user Override the user to run your container as. Specify as username or UID or UID:GID. volumes Specify volumes that can be mounted. See Volumes/Mounts . workdir Override the working directory to run your container in. CPU/Memory Resources \u00b6 cpu CPU Shares specified as an integer. 1 cpu core is equal to 1024 shares. memory Memory allocation for the task. Can be specified in multiple ways: An integer, denoting megabytes (ex: 4096 ) A multiplier of CPU shares in the format of #.#x (ex: 2x or 0.25x ) As gigabytes with the format of #.# GB (ex: 8GB or 0.5 GB ) Warning Fargate places restrictions on the allowable CPU/Memory requirements. (See more on Fargate task sizes ) If you specify CPU/Memory combinations that do not exist on Fargate, the deployer will automatically pick the smallest size that will contain the CPU/Memory requirements you have specified. Example: If you specify cpu=512/memory=7000, then the deployer will use cpu=1024,memory=7168 as that is the smallest Fargate size that meets the requirements. Command/Entry Point \u00b6 Commands and EntryPoints can be specified in two ways: Array Based (preferred) String Based command : [ \"bundle\" , \"exec\" , \"puma\" , \"-c\" , \"config/puma.rb\" ] command : \"bundle exec puma -c config/puma.rb\" Warning Commands are always represented as an array of strings. If you provide it as a string, that string will be split into an array, (possibly incorrectly). For that reason we recommend you only use the Array based method for specifying commands. Also : Environment/Shell interpolation is not available on ECS. Do not use environment references in your commands. Start/Stop Timeouts \u00b6 start_timeout How long ECS will wait for your container to start before giving up. Note that this is for container dependency resolution. You probably do not need to modify this stop_timeout Time to wait before the container is forcefully killed if it doesn't exit normally on its own, when requested to terminate. Note that for spot containers, they will be killed after 2 minutes regardless of what you put here. You can specify all durations as either seconds (as an integer) or using Go Duration Format (eg 2m or 30s ) Container Health Checks \u00b6 Warning AWS recommends that you do not use a docker health check For the official documentation on specifying health checks, see AWS ECS HealthCheck Documentation command - (required) The command to be run for the healthcheck. You must specify this as an array of strings, with the first element being either CMD or CMD-SHELL . See ECS HealthCheck Command Docs interval The time period in seconds between each health check execution. retries The number of times to retry a failed health check before the container is considered unhealthy. start_period The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. timeout The time period in seconds to wait for a health check to succeed before it is considered a failure. Ulimits \u00b6 Specify ulimits as an array of objects with the following properties: name - (required) The name of the ulimit to adjust. Possible values are shown in the AWS ECS Documentation . Note that Fargate may not allow you to adjust all ulimits. soft The value for the soft limit. Specified as an integer. hard The value for the hard limit. Specified as an integer. Proxy Configuration \u00b6 You must specify the proxy container as a sidecar. If you do not specify it, then your tasks will fail. Example Shorthand Disable task_defaults : proxy : container : envoy properties : AppPorts : 5000 IgnoredUID : 1000 ... proxy : false type The only acceptable value for this is APPMESH . This is the default, so it's recommended that you just leave this blank. Default : APPMESH container The name of the container that is providing the proxy. Default : envoy properties - (required) The properties for the proxy configuration. You can use the same syntax used for defining environment variables , except you cannot specify any SSM parameters. For a list of properties, see the AWS ECS ProxyConfiguration docs. Default : empty (You must provide the required properties) disabled If this is true, then the proxy configuration will be disabled for this task. Default : false Private Registry \u00b6 You can utilize ECS to connect to a private registry by providing the ARN of a SecretsManager secret for the credentials key. This is normally not needed. If you are using ECR to host images, you do not need this. If you are unsure if you need this, then you don't need it. For more details, look at the AWS documentation for Private registry authentication for tasks","title":"Common Task Options"},{"location":"config/common/#shared-task-attributes","text":"The attributes below are available in the following sections: Services Remote Shell Task Defaults PreDeploy Tasks CronJobs","title":"Shared Task Attributes"},{"location":"config/common/#usage","text":"Task Defaults Services Cronjobs PreDeploy Tasks Remote Shell task_defaults : cpu : 1024 <something from Fields> : value task_defaults : cpu : 1024 services : - name : web <something from Fields> : value - name : important-jobs cpu : 4096 memory : 4x cronjobs : - name : reaper ... <something from Fields> : value predeploy : - name : dbmigrate ... <something from Fields> : value console : enabled : true ... <something from Fields> : value","title":"Usage"},{"location":"config/common/#fields","text":"arch Override the architecture of this task. Values are amd64 or arm64 . Default : amd64 command See Command/Entry Point cpu How many CPU shares are given to the task See CPU/Memory Resources Default : 1024 credentials See Private Registry entrypoint See Command/Entry Point environment Allows extra task-specific environment variables to be added. See Environment Variables image Allows you to override the image used for this task. See Image Documentation labels Add Docker Labels. Same structure as in the Tags Documentation . memory See CPU/Memory Resources Default : 2x mounts Specify mount points. See Volumes/Mounts . network Override network settings. See Network platform_version Override the Fargate Platform Version . Default : LATEST proxy See Proxy Configuration start_timeout See Start/Stop Timeouts stop_timeout See Start/Stop Timeouts storage Amount of storage to attach to the cluster (in GiB) See AWS Documentation on Fargate Storage healthcheck See Container Health Checks tags Additional tags to apply to this task. Same format as in the Tags Documentation . ulimits Specify limit overrides per container. See Ulimits for more details. user Override the user to run your container as. Specify as username or UID or UID:GID. volumes Specify volumes that can be mounted. See Volumes/Mounts . workdir Override the working directory to run your container in.","title":"Fields"},{"location":"config/common/#cpumemory-resources","text":"cpu CPU Shares specified as an integer. 1 cpu core is equal to 1024 shares. memory Memory allocation for the task. Can be specified in multiple ways: An integer, denoting megabytes (ex: 4096 ) A multiplier of CPU shares in the format of #.#x (ex: 2x or 0.25x ) As gigabytes with the format of #.# GB (ex: 8GB or 0.5 GB ) Warning Fargate places restrictions on the allowable CPU/Memory requirements. (See more on Fargate task sizes ) If you specify CPU/Memory combinations that do not exist on Fargate, the deployer will automatically pick the smallest size that will contain the CPU/Memory requirements you have specified. Example: If you specify cpu=512/memory=7000, then the deployer will use cpu=1024,memory=7168 as that is the smallest Fargate size that meets the requirements.","title":"CPU/Memory Resources"},{"location":"config/common/#commandentry-point","text":"Commands and EntryPoints can be specified in two ways: Array Based (preferred) String Based command : [ \"bundle\" , \"exec\" , \"puma\" , \"-c\" , \"config/puma.rb\" ] command : \"bundle exec puma -c config/puma.rb\" Warning Commands are always represented as an array of strings. If you provide it as a string, that string will be split into an array, (possibly incorrectly). For that reason we recommend you only use the Array based method for specifying commands. Also : Environment/Shell interpolation is not available on ECS. Do not use environment references in your commands.","title":"Command/Entry Point"},{"location":"config/common/#startstop-timeouts","text":"start_timeout How long ECS will wait for your container to start before giving up. Note that this is for container dependency resolution. You probably do not need to modify this stop_timeout Time to wait before the container is forcefully killed if it doesn't exit normally on its own, when requested to terminate. Note that for spot containers, they will be killed after 2 minutes regardless of what you put here. You can specify all durations as either seconds (as an integer) or using Go Duration Format (eg 2m or 30s )","title":"Start/Stop Timeouts"},{"location":"config/common/#container-health-checks","text":"Warning AWS recommends that you do not use a docker health check For the official documentation on specifying health checks, see AWS ECS HealthCheck Documentation command - (required) The command to be run for the healthcheck. You must specify this as an array of strings, with the first element being either CMD or CMD-SHELL . See ECS HealthCheck Command Docs interval The time period in seconds between each health check execution. retries The number of times to retry a failed health check before the container is considered unhealthy. start_period The optional grace period to provide containers time to bootstrap before failed health checks count towards the maximum number of retries. timeout The time period in seconds to wait for a health check to succeed before it is considered a failure.","title":"Container Health Checks"},{"location":"config/common/#ulimits","text":"Specify ulimits as an array of objects with the following properties: name - (required) The name of the ulimit to adjust. Possible values are shown in the AWS ECS Documentation . Note that Fargate may not allow you to adjust all ulimits. soft The value for the soft limit. Specified as an integer. hard The value for the hard limit. Specified as an integer.","title":"Ulimits"},{"location":"config/common/#proxy-configuration","text":"You must specify the proxy container as a sidecar. If you do not specify it, then your tasks will fail. Example Shorthand Disable task_defaults : proxy : container : envoy properties : AppPorts : 5000 IgnoredUID : 1000 ... proxy : false type The only acceptable value for this is APPMESH . This is the default, so it's recommended that you just leave this blank. Default : APPMESH container The name of the container that is providing the proxy. Default : envoy properties - (required) The properties for the proxy configuration. You can use the same syntax used for defining environment variables , except you cannot specify any SSM parameters. For a list of properties, see the AWS ECS ProxyConfiguration docs. Default : empty (You must provide the required properties) disabled If this is true, then the proxy configuration will be disabled for this task. Default : false","title":"Proxy Configuration"},{"location":"config/common/#private-registry","text":"You can utilize ECS to connect to a private registry by providing the ARN of a SecretsManager secret for the credentials key. This is normally not needed. If you are using ECR to host images, you do not need this. If you are unsure if you need this, then you don't need it. For more details, look at the AWS documentation for Private registry authentication for tasks","title":"Private Registry"},{"location":"config/console/","text":"Remote Shell (Console Task) \u00b6 You can easily open an ephemeral shell into your application using the console task. This is provided by Remote SSH Docker Shell . You can then easily connect to your application using the Remote Shell Client . Client Usage \u00b6 $ remote-shell -a myapp spawning remote shell... root@container$ And you're in! Now you can run commands in your app's actual environment. When you exit, the container will be terminated, and all files written will be deleted. (Note: If you make database modifications, or external changes, those will still persist.) You need to follow the Usage instructions for the RemoteShell app in order to add it to your application. This is not a task that runs normally. Only a task definition is created, and the task will be run on-demand when you try to launch a shell. Once your session finishes, the task will be killed. Any modifications to the filesystem will be lost once you exit the shell. You cannot modify already deployed code. Enabling Remote Shell \u00b6 By default, the remote shell is not enabled. If you would like it to be created, you must explicitly enable it. Enable with defaults Enable with customizations Disable console : true console : enabled : true port : 1234 console : false Fields \u00b6 enabled Enables the Remote Shell. Obviously, this is required if you want the console. Default : false (disabled by default) port Set the port that will be opened for this task. Default : 8722 path If you placed the RemoteShell binary in a non-standard location, then you should specify it here. Default : not set (will use client default) <anything from common> See Common Task Options . You can override things like cpu , memory or storage , etc","title":"Remote Shell"},{"location":"config/console/#remote-shell-console-task","text":"You can easily open an ephemeral shell into your application using the console task. This is provided by Remote SSH Docker Shell . You can then easily connect to your application using the Remote Shell Client .","title":"Remote Shell (Console Task)"},{"location":"config/console/#client-usage","text":"$ remote-shell -a myapp spawning remote shell... root@container$ And you're in! Now you can run commands in your app's actual environment. When you exit, the container will be terminated, and all files written will be deleted. (Note: If you make database modifications, or external changes, those will still persist.) You need to follow the Usage instructions for the RemoteShell app in order to add it to your application. This is not a task that runs normally. Only a task definition is created, and the task will be run on-demand when you try to launch a shell. Once your session finishes, the task will be killed. Any modifications to the filesystem will be lost once you exit the shell. You cannot modify already deployed code.","title":"Client Usage"},{"location":"config/console/#enabling-remote-shell","text":"By default, the remote shell is not enabled. If you would like it to be created, you must explicitly enable it. Enable with defaults Enable with customizations Disable console : true console : enabled : true port : 1234 console : false","title":"Enabling Remote Shell"},{"location":"config/console/#fields","text":"enabled Enables the Remote Shell. Obviously, this is required if you want the console. Default : false (disabled by default) port Set the port that will be opened for this task. Default : 8722 path If you placed the RemoteShell binary in a non-standard location, then you should specify it here. Default : not set (will use client default) <anything from common> See Common Task Options . You can override things like cpu , memory or storage , etc","title":"Fields"},{"location":"config/cronjobs/","text":"CronJobs \u00b6 You can easily create Scheduled Tasks for your application by specifying a cronjobs block. Example \u00b6 cronjobs : - name : reaper schedule : \"cron(0 9 * * ? *)\" command : [ \"bundle\" , \"exec\" , \"rake\" , \"cron:whatever\" ] Fields \u00b6 In addition to the fields listed below, you can also specify anything in Common Task Options . name - (required) Unique name for your cron job. This will be used to create the schedule on EventBridge Scheduler. This should be a short identifier with only letters, numbers, dash or underscore. schedule - (required) The schedule expression that is used to determine when your task runs. This can be either a cron expression , a rate expression , or a one-time expression . Expression format: EventBridge Cron/Rate Expressions command - (recommended) The command you want to run for this cronjob. This field is not required, but it doesn't make much sense to exclude it. For details on how to specify a command, see Specifying Command/EntryPoints description An optional description that will be added to the schedule. Any string is valid here. Default : none disabled Create this cronjob, but do not enable it. It will not run. Default : false timezone Sets the time zone used when interpreting the schedule expression. This should be an IANA Timezone Identifier like UTC or America/Los_Angeles . Default : none (AWS will default to UTC) start_date You can set a cron to start evaluating after a specific date if needed. If provided, must be in RFC 3339 format. Default : none end_date Stop executing the cron job after the given date. If provided, must be in RFC 3339 format. Default : none <anything from common> See Common Task Options . See Also \u00b6 Customizing Resource Names Templating AWS EventBridge Scheduler","title":"CronJobs"},{"location":"config/cronjobs/#cronjobs","text":"You can easily create Scheduled Tasks for your application by specifying a cronjobs block.","title":"CronJobs"},{"location":"config/cronjobs/#example","text":"cronjobs : - name : reaper schedule : \"cron(0 9 * * ? *)\" command : [ \"bundle\" , \"exec\" , \"rake\" , \"cron:whatever\" ]","title":"Example"},{"location":"config/cronjobs/#fields","text":"In addition to the fields listed below, you can also specify anything in Common Task Options . name - (required) Unique name for your cron job. This will be used to create the schedule on EventBridge Scheduler. This should be a short identifier with only letters, numbers, dash or underscore. schedule - (required) The schedule expression that is used to determine when your task runs. This can be either a cron expression , a rate expression , or a one-time expression . Expression format: EventBridge Cron/Rate Expressions command - (recommended) The command you want to run for this cronjob. This field is not required, but it doesn't make much sense to exclude it. For details on how to specify a command, see Specifying Command/EntryPoints description An optional description that will be added to the schedule. Any string is valid here. Default : none disabled Create this cronjob, but do not enable it. It will not run. Default : false timezone Sets the time zone used when interpreting the schedule expression. This should be an IANA Timezone Identifier like UTC or America/Los_Angeles . Default : none (AWS will default to UTC) start_date You can set a cron to start evaluating after a specific date if needed. If provided, must be in RFC 3339 format. Default : none end_date Stop executing the cron job after the given date. If provided, must be in RFC 3339 format. Default : none <anything from common> See Common Task Options .","title":"Fields"},{"location":"config/cronjobs/#see-also","text":"Customizing Resource Names Templating AWS EventBridge Scheduler","title":"See Also"},{"location":"config/defaults/","text":"Task Defaults \u00b6 The task defaults section lets you define attributes that all PreDeploy Tasks , CronJobs , and Services will inherit. Anything you specify here can be overridden on the individual task as well. This is where you would set things like CPU/Memory resources, storage, architecture, etc. Common Options \u00b6 You can override every option in the Common Task Options section. Spot Configuration \u00b6 This is also where you can specify the Spot Configuration if you want to utilize Fargate Spot. Example \u00b6 task_defaults : cpu : 2048 memory : 4x spot : enabled : true Fields \u00b6 <anything from common> See Common Task Options . Any values you specify will be used as the default for all tasks, cronjobs, services, etc. created by the deployer. spot Allows you to specify the default Spot Configuration for services (spot does not apply to single run tasks) Default Values \u00b6 To make onboarding easier, ECS Deployer provides a few default values for you out-of-the-box. You are welcome to override these if you want. Field Default Value arch amd64 cpu 1024 memory 2x platform_version LATEST","title":"Task Defaults"},{"location":"config/defaults/#task-defaults","text":"The task defaults section lets you define attributes that all PreDeploy Tasks , CronJobs , and Services will inherit. Anything you specify here can be overridden on the individual task as well. This is where you would set things like CPU/Memory resources, storage, architecture, etc.","title":"Task Defaults"},{"location":"config/defaults/#common-options","text":"You can override every option in the Common Task Options section.","title":"Common Options"},{"location":"config/defaults/#spot-configuration","text":"This is also where you can specify the Spot Configuration if you want to utilize Fargate Spot.","title":"Spot Configuration"},{"location":"config/defaults/#example","text":"task_defaults : cpu : 2048 memory : 4x spot : enabled : true","title":"Example"},{"location":"config/defaults/#fields","text":"<anything from common> See Common Task Options . Any values you specify will be used as the default for all tasks, cronjobs, services, etc. created by the deployer. spot Allows you to specify the default Spot Configuration for services (spot does not apply to single run tasks)","title":"Fields"},{"location":"config/defaults/#default-values","text":"To make onboarding easier, ECS Deployer provides a few default values for you out-of-the-box. You are welcome to override these if you want. Field Default Value arch amd64 cpu 1024 memory 2x platform_version LATEST","title":"Default Values"},{"location":"config/envvars/","text":"Environment Variables \u00b6 Automatic import of SSM parameters \u00b6 By default, ECS Deployer will attempt to import secrets from SSM Parameter store for you. For information on configuring SSM Parameter Import, see the SSM Parameter Store Secrets Import section on the Settings page. The basename of the parameter path is used as the Variable Name. The value is never read by the Deployer, as it is passed as a secret to your application. Example /ecsdeployer/secrets/myapp/DATABASE_URL added as DATABASE_URL /ecsdeployer/secrets/myapp/SECRET_API_KEY added as SECRET_API_KEY Specifying Values \u00b6 SSM Parameter Store Reference \u00b6 This is secure and can be used for sensitive values environment : # ... MY_VARIABLE_NAME : ssm : /path/or/arn/to/ssm/or/secrets-manager/value You can specify values as either a path to an SSM Parameter, the full ARN for an SSM Parameter, or the full ARN of a SecretsManager secret. Insecure Values \u00b6 Adding environment variables to your config file will keep them in plain text. This is not recommended for sensitive values. Plain String Templated Values Unset Inherited Value You can specify the environment variable value as any primitive type that is castable to a string. (ie: string, boolean, number) These will be added to the task's environment as plaintext. environment : PORT : 1234 ALLOW_CLOWNS : false ALLOW_FUN : true PHASERS : stun GIGAWATTS : 1.21 Same as Plain String, but you can now use Templates in the value. environment : APP_DEPLOYED_AT : \"{{ .Date }}\" GITHUB_REF : \"{{ .Env.GITHUB_REF_NAME }}\" If you define an environment variable globally (or it is pulled from your SSM root), then you can optionally unset that variable for a specific task or service. environment : SOMEVAR : unset : true SOME_OTHER_VAL : \"some value\" Example \u00b6 environment : PORT : 5000 ENABLE_FUNTIME : true FOO : bar BUILD_REF_NAME : { template : \"{{ .Env.GITHUB_REF_NAME }}\" } SSM_VARIABLE : { ssm : \"/path/to/some/ssm/variable\" }","title":"Environment Vars"},{"location":"config/envvars/#environment-variables","text":"","title":"Environment Variables"},{"location":"config/envvars/#automatic-import-of-ssm-parameters","text":"By default, ECS Deployer will attempt to import secrets from SSM Parameter store for you. For information on configuring SSM Parameter Import, see the SSM Parameter Store Secrets Import section on the Settings page. The basename of the parameter path is used as the Variable Name. The value is never read by the Deployer, as it is passed as a secret to your application. Example /ecsdeployer/secrets/myapp/DATABASE_URL added as DATABASE_URL /ecsdeployer/secrets/myapp/SECRET_API_KEY added as SECRET_API_KEY","title":"Automatic import of SSM parameters"},{"location":"config/envvars/#specifying-values","text":"","title":"Specifying Values"},{"location":"config/envvars/#ssm-parameter-store-reference","text":"This is secure and can be used for sensitive values environment : # ... MY_VARIABLE_NAME : ssm : /path/or/arn/to/ssm/or/secrets-manager/value You can specify values as either a path to an SSM Parameter, the full ARN for an SSM Parameter, or the full ARN of a SecretsManager secret.","title":"SSM Parameter Store Reference"},{"location":"config/envvars/#insecure-values","text":"Adding environment variables to your config file will keep them in plain text. This is not recommended for sensitive values. Plain String Templated Values Unset Inherited Value You can specify the environment variable value as any primitive type that is castable to a string. (ie: string, boolean, number) These will be added to the task's environment as plaintext. environment : PORT : 1234 ALLOW_CLOWNS : false ALLOW_FUN : true PHASERS : stun GIGAWATTS : 1.21 Same as Plain String, but you can now use Templates in the value. environment : APP_DEPLOYED_AT : \"{{ .Date }}\" GITHUB_REF : \"{{ .Env.GITHUB_REF_NAME }}\" If you define an environment variable globally (or it is pulled from your SSM root), then you can optionally unset that variable for a specific task or service. environment : SOMEVAR : unset : true SOME_OTHER_VAL : \"some value\"","title":"Insecure Values"},{"location":"config/envvars/#example","text":"environment : PORT : 5000 ENABLE_FUNTIME : true FOO : bar BUILD_REF_NAME : { template : \"{{ .Env.GITHUB_REF_NAME }}\" } SSM_VARIABLE : { ssm : \"/path/to/some/ssm/variable\" }","title":"Example"},{"location":"config/examples/","text":"Example Configuration Files \u00b6 Simple Web App Generic App project : simple-http cluster : default image : ecr : simple-http tag : \"{{ .ImageTag }}\" task_defaults : cpu : 512 memory : 2x network : public_ip : false subnets : - subnet-111111111 - subnet-222222222 security_groups : - sg-111111111 - sg-222222222 services : - name : web command : [ \"httpd\" , \"-p\" , \"8080\" ] desired : 3 load_balancer : port : 8080 target_group : simple-http-web project : deployer-test image : \"webdestroya/http-placeholder:latest\" cluster : cloud87 role : cloud87-deployer-role execution_role : cloud87-ecs-execution cron_launcher_role : cloud87-ecs-cron-launcher settings : ssm_import : /apps/secrets/deployer-test network : subnets : - tag:cloud87/network=private - name : state values : [ available ] - name : tag:cloud87/subnet_class value : host security_groups : - name : group-name values : [ \"cloud87-ecs\" ] logging : awslogs : retention : 180 tags : - name : cloud87/billable value : true - name : cloud87/application value : \"{{ .Project }}\" - name : cloud87/ecs/app value : \"{{ .Project }}\" - name : \"cloud87/{{.Project}}/things\" value : \"{{ .Date }}\" console : enabled : true port : 8722 predeploy : - name : dbmigrate command : [ \"bundle\" , \"exec\" , \"rake\" , \"db:migrate\" ] environment : SOMEVARNAME : foobar task_defaults : cpu : 512 memory : 2048 services : - name : web desired : 3 command : [ \"nothing\" ] load_balancer : target_group : c87-deployer-test-web port : 5000 environment : PORT : 5000 rollout : min : 100 max : 200 - name : worker desired : 0 command : \"bundle exec something --or other\" cronjobs : - name : reaper schedule : \"cron(0 9 * * ? *)\" command : [ \"bundle\" , \"exec\" , \"rake\" , \"cron:whatever\" ] description : \"Whatever: this does stuff\"","title":"Example Configs"},{"location":"config/examples/#example-configuration-files","text":"Simple Web App Generic App project : simple-http cluster : default image : ecr : simple-http tag : \"{{ .ImageTag }}\" task_defaults : cpu : 512 memory : 2x network : public_ip : false subnets : - subnet-111111111 - subnet-222222222 security_groups : - sg-111111111 - sg-222222222 services : - name : web command : [ \"httpd\" , \"-p\" , \"8080\" ] desired : 3 load_balancer : port : 8080 target_group : simple-http-web project : deployer-test image : \"webdestroya/http-placeholder:latest\" cluster : cloud87 role : cloud87-deployer-role execution_role : cloud87-ecs-execution cron_launcher_role : cloud87-ecs-cron-launcher settings : ssm_import : /apps/secrets/deployer-test network : subnets : - tag:cloud87/network=private - name : state values : [ available ] - name : tag:cloud87/subnet_class value : host security_groups : - name : group-name values : [ \"cloud87-ecs\" ] logging : awslogs : retention : 180 tags : - name : cloud87/billable value : true - name : cloud87/application value : \"{{ .Project }}\" - name : cloud87/ecs/app value : \"{{ .Project }}\" - name : \"cloud87/{{.Project}}/things\" value : \"{{ .Date }}\" console : enabled : true port : 8722 predeploy : - name : dbmigrate command : [ \"bundle\" , \"exec\" , \"rake\" , \"db:migrate\" ] environment : SOMEVARNAME : foobar task_defaults : cpu : 512 memory : 2048 services : - name : web desired : 3 command : [ \"nothing\" ] load_balancer : target_group : c87-deployer-test-web port : 5000 environment : PORT : 5000 rollout : min : 100 max : 200 - name : worker desired : 0 command : \"bundle exec something --or other\" cronjobs : - name : reaper schedule : \"cron(0 9 * * ? *)\" command : [ \"bundle\" , \"exec\" , \"rake\" , \"cron:whatever\" ] description : \"Whatever: this does stuff\"","title":"Example Configuration Files"},{"location":"config/logging/","text":"Logging \u00b6 Logging for your tasks will be automatically setup based upon your specified configuration. If you do not specify any logging configuration, then CloudWatch logs will be used. Example Usage \u00b6 Using CloudWatch Logs (default) Using FireLens Using Custom Driver logging : awslogs : retention : 180 logging : firelens : type : \"fluentbit\" options : enable-ecs-log-metadata : true Name : thing region : \"us-east-1\" delivery_stream : \"my-stream\" log-driver-buffer-limit : \"2097152\" logging : custom : driver : \"splunk\" options : splunk-url : http://spunkysplunky.splunkcloud.com:8080/ splunk-insecureskipverify : \"True\" splunk-token : ssm : /secrets/splunktoken Fields \u00b6 You should select only one of the following: awslogs See Using CloudWatch Logs This is the default if you do not specify a logging block firelens See Using FireLens custom See Using Custom Logging disabled Disable all logging Default : false Note: If you specify multiple options, then the following order will be used: Custom, Firelens, Awslogs. Using CloudWatch Logs \u00b6 Note: When using CloudWatch logs, the deployer will automatically create any missing log groups for you. Fields \u00b6 retention How many days logs should be kept. To keep logs forever, specify forever Valid values can be found on the PutRetentionPolicy documentation. Default : 180 (days) options Allows you to specify extra options for the awslogs driver. Note: awslogs-group , awslogs-stream-prefix and awslogs-region are already set for you. Valid options: awslogs driver options disabled Disable CloudWatch logs. Default : false See Also name_template.log_group name_template.log_stream_prefix AWS Documentation on using CloudWatch Logs Using FireLens \u00b6 Note: When using firelens, a container dependency will be automatically created for you. Your primary container will depend on the firelens router. Fields \u00b6 type The FireLens log router flavor you want to use. Possible Options: fluentbit - (preferred, default) fluentd Default : fluentbit options Allows you to specify options to provide for the individual task container log configurations. Options can be specified identically to how Environment Variables are specified. Values that reference an SSM Parameter will be added to the SecretOptions field on the container. All others will be added to Options . Unless you are using a custom log router image that has these values already set for you, this field is most likely required. Usage example logging : firelens : type : fluentbit options : Name : thing region : \"us-east-1\" delivery_stream : \"my-stream\" log-driver-buffer-limit : \"2097152\" whatever : { template : \"{{ .Date }}\" } router_options Allows you to specify options that will be passed to the Firelens router container only . These are not applied to the task containers. Options can be specified identically to how Environment Variables are specified, but you cannot specify any SSM parameters . You generally will not need to configure this. This is meant for advanced customization of Firelens. Usage example logging : firelens : type : fluentbit options : Name : thing region : \"us-east-1\" delivery_stream : \"my-stream\" router_options : enable-ecs-log-metadata : true memory Memory reservation for this container. This will be used as the reservation setting for the container within this task. This should generally be low, as this will prevent the logging container from stealing memory from the primary container Default : 50 (megabytes) Advanced Fields \u00b6 image Override the FireLens router image to use. If you are using fluentbit , then this will default to the official fluentbit image If you are using fluentd then you must specify this. See Specifying Images for more information. inherit_env Should the logging container inherit all the environment variables that were provided to the primary container? Note: if you have many environment variables, you might encounter task size limits. Default : false environment Add extra environment variables that are specific to this container (and will not be shared to the other containers in the task.) For more info, read the Environment Variables documentation. container_name The name of the logging container. Normally you should not be changing this. Default : log_router log_to_awslogs Whether the firelens container itself should log to CloudWatch logs or not. This is helpful if you are debugging issues with your log router, but otherwise is not necessary. This is either: Boolean false - disable logging to Cloudwatch Logs (default) String (the log group you want to log to) - You are responsible for making this group. (Or allow the execution_role to create it) Default : false credentials Optional private registry credentials disabled Disable FireLens entirely. Default : false Using Custom Logging \u00b6 Fields \u00b6 driver The log driver you want to use. (ex: splunk ) Default : blank (disabled) options Allows you to specify extra options for the driver. Options are specific to the driver you selected.","title":"Logging"},{"location":"config/logging/#logging","text":"Logging for your tasks will be automatically setup based upon your specified configuration. If you do not specify any logging configuration, then CloudWatch logs will be used.","title":"Logging"},{"location":"config/logging/#example-usage","text":"Using CloudWatch Logs (default) Using FireLens Using Custom Driver logging : awslogs : retention : 180 logging : firelens : type : \"fluentbit\" options : enable-ecs-log-metadata : true Name : thing region : \"us-east-1\" delivery_stream : \"my-stream\" log-driver-buffer-limit : \"2097152\" logging : custom : driver : \"splunk\" options : splunk-url : http://spunkysplunky.splunkcloud.com:8080/ splunk-insecureskipverify : \"True\" splunk-token : ssm : /secrets/splunktoken","title":"Example Usage"},{"location":"config/logging/#fields","text":"You should select only one of the following: awslogs See Using CloudWatch Logs This is the default if you do not specify a logging block firelens See Using FireLens custom See Using Custom Logging disabled Disable all logging Default : false Note: If you specify multiple options, then the following order will be used: Custom, Firelens, Awslogs.","title":"Fields"},{"location":"config/logging/#using-cloudwatch-logs","text":"Note: When using CloudWatch logs, the deployer will automatically create any missing log groups for you.","title":"Using CloudWatch Logs"},{"location":"config/logging/#fields_1","text":"retention How many days logs should be kept. To keep logs forever, specify forever Valid values can be found on the PutRetentionPolicy documentation. Default : 180 (days) options Allows you to specify extra options for the awslogs driver. Note: awslogs-group , awslogs-stream-prefix and awslogs-region are already set for you. Valid options: awslogs driver options disabled Disable CloudWatch logs. Default : false See Also name_template.log_group name_template.log_stream_prefix AWS Documentation on using CloudWatch Logs","title":"Fields"},{"location":"config/logging/#using-firelens","text":"Note: When using firelens, a container dependency will be automatically created for you. Your primary container will depend on the firelens router.","title":"Using FireLens"},{"location":"config/logging/#fields_2","text":"type The FireLens log router flavor you want to use. Possible Options: fluentbit - (preferred, default) fluentd Default : fluentbit options Allows you to specify options to provide for the individual task container log configurations. Options can be specified identically to how Environment Variables are specified. Values that reference an SSM Parameter will be added to the SecretOptions field on the container. All others will be added to Options . Unless you are using a custom log router image that has these values already set for you, this field is most likely required. Usage example logging : firelens : type : fluentbit options : Name : thing region : \"us-east-1\" delivery_stream : \"my-stream\" log-driver-buffer-limit : \"2097152\" whatever : { template : \"{{ .Date }}\" } router_options Allows you to specify options that will be passed to the Firelens router container only . These are not applied to the task containers. Options can be specified identically to how Environment Variables are specified, but you cannot specify any SSM parameters . You generally will not need to configure this. This is meant for advanced customization of Firelens. Usage example logging : firelens : type : fluentbit options : Name : thing region : \"us-east-1\" delivery_stream : \"my-stream\" router_options : enable-ecs-log-metadata : true memory Memory reservation for this container. This will be used as the reservation setting for the container within this task. This should generally be low, as this will prevent the logging container from stealing memory from the primary container Default : 50 (megabytes)","title":"Fields"},{"location":"config/logging/#advanced-fields","text":"image Override the FireLens router image to use. If you are using fluentbit , then this will default to the official fluentbit image If you are using fluentd then you must specify this. See Specifying Images for more information. inherit_env Should the logging container inherit all the environment variables that were provided to the primary container? Note: if you have many environment variables, you might encounter task size limits. Default : false environment Add extra environment variables that are specific to this container (and will not be shared to the other containers in the task.) For more info, read the Environment Variables documentation. container_name The name of the logging container. Normally you should not be changing this. Default : log_router log_to_awslogs Whether the firelens container itself should log to CloudWatch logs or not. This is helpful if you are debugging issues with your log router, but otherwise is not necessary. This is either: Boolean false - disable logging to Cloudwatch Logs (default) String (the log group you want to log to) - You are responsible for making this group. (Or allow the execution_role to create it) Default : false credentials Optional private registry credentials disabled Disable FireLens entirely. Default : false","title":"Advanced Fields"},{"location":"config/logging/#using-custom-logging","text":"","title":"Using Custom Logging"},{"location":"config/logging/#fields_3","text":"driver The log driver you want to use. (ex: splunk ) Default : blank (disabled) options Allows you to specify extra options for the driver. Options are specific to the driver you selected.","title":"Fields"},{"location":"config/naming/","text":"Customize Naming \u00b6 If you want to modify how the deployer names various resources, you can add a custom section with the following: For more details on the options you can use in templates, view the Templating documentation. Danger! Advanced Topic! Under normal operation you should not need to modify any of these values. Incorrectly modifying the templates used could seriously harm your application and cause downtime. If you do not understand what these are doing, you should not adjust them Example Usage \u00b6 name_templates : log_group : \"/applogs/{{ .Project }}/{{ .Name }}\" Fields \u00b6 log_group - (required) This is the log group path that will be created for each task. This is not used if logging has been disabled. Default Default (with Stage) Raw /ecsdeployer/app/{PROJECT}/{TASK} /ecsdeployer/app/{PROJECT}/{STAGE}/{TASK} /ecsdeployer/app/{{ .Project }}/{{ if .Stage }}{{ .Stage }}/{{end}}{{ .Name }} log_stream_prefix - (required) Fargate tasks require a logging prefix. Default Default (with Stage) Raw {CONTAINER} {CONTAINER} {{ .Container }} service_name - (required) The name used for ECS Services. If you need a custom prefix, you can modify this Default Default (with Stage) Raw {PROJECT}-{TASK} {PROJECT}-{STAGE}-{TASK} {{ .Project }}{{ if .Stage }}-{{ .Stage }}{{end}}-{{ .Name }} task_family - (required) This will be the TaskDefinition Family Name Default Default (with Stage) Raw {PROJECT}-{TASK} {PROJECT}-{STAGE}-{TASK} {{ .Project }}{{ if .Stage }}-{{ .Stage }}{{end}}-{{ .Name }} schedule_group - (required) The Schedule Group name when creating CronJobs Default Default (with Stage) Raw {PROJECT} {PROJECT}-{STAGE} {{ .Project }}{{ if .Stage }}-{{ .Stage }}{{end}} schedule - (required) The schedule name when creating CronJobs Default Default (with Stage) Raw ecsd-cron-{PROJECT}-{TASK} ecsd-cron-{PROJECT}-{STAGE}-{TASK} ecsd-cron-{{ .Project }}{{ if .Stage }}-{{ .Stage }}{{end}}-{{ .Name }} cron_group This is the 'Group' field when a task is run via a cron job. If you have special tracking of this field, you can enter a value here If you enter something that evaluates to an empty string, then the group field will not be included. Default Default (with Stage) Raw ecsd:{PROJECT}:cron:{TASK} ecsd:{PROJECT}:{STAGE}:cron:{TASK} ecsd:{{ .Project }}{{ if .Stage }}:{{ .Stage }}{{end}}:cron:{{ .Name }} predeploy_group Same as the cron_group , this is only used when predeploy tasks are run If you enter something that evaluates to an empty string, then the group field will not be included. Default Default (with Stage) Raw ecsd:{PROJECT}:pd:{TASK} ecsd:{PROJECT}:{STAGE}:pd:{TASK} ecsd:{{ .Project }}{{ if .Stage }}:{{ .Stage }}{{end}}:pd:{{ .Name }} predeploy_started_by This is the 'StartedBy' field on RunTask. If you enter something that evaluates to an empty string, then the group field will not be included. Default Default (with Stage) Raw ecsd:{PROJECT}:deployer ecsd:{PROJECT}:{STAGE}:deployer ecsd:{{ .Project }}{{ if .Stage }}:{{ .Stage }}{{end}}:deployer marker_tag_key - (required) The marker tag is something added to all resources created by the deployer. This allows the deployer to delete resources that it created, but that have since been removed from the deployment configuration file. Once you deploy a project, you should not modify the values used for the marker tag. Default Default (with Stage) Raw ecsdeployer/project ecsdeployer/project ecsdeployer/project marker_tag_value - (required) Value used for the tag defined by marker_tag_key Default Default (with Stage) Raw {PROJECT} {PROJECT}/{STAGE} {{ .Project }}{{ if .Stage }}/{{ .Stage }}{{end}}","title":"Naming"},{"location":"config/naming/#customize-naming","text":"If you want to modify how the deployer names various resources, you can add a custom section with the following: For more details on the options you can use in templates, view the Templating documentation. Danger! Advanced Topic! Under normal operation you should not need to modify any of these values. Incorrectly modifying the templates used could seriously harm your application and cause downtime. If you do not understand what these are doing, you should not adjust them","title":"Customize Naming"},{"location":"config/naming/#example-usage","text":"name_templates : log_group : \"/applogs/{{ .Project }}/{{ .Name }}\"","title":"Example Usage"},{"location":"config/naming/#fields","text":"log_group - (required) This is the log group path that will be created for each task. This is not used if logging has been disabled. Default Default (with Stage) Raw /ecsdeployer/app/{PROJECT}/{TASK} /ecsdeployer/app/{PROJECT}/{STAGE}/{TASK} /ecsdeployer/app/{{ .Project }}/{{ if .Stage }}{{ .Stage }}/{{end}}{{ .Name }} log_stream_prefix - (required) Fargate tasks require a logging prefix. Default Default (with Stage) Raw {CONTAINER} {CONTAINER} {{ .Container }} service_name - (required) The name used for ECS Services. If you need a custom prefix, you can modify this Default Default (with Stage) Raw {PROJECT}-{TASK} {PROJECT}-{STAGE}-{TASK} {{ .Project }}{{ if .Stage }}-{{ .Stage }}{{end}}-{{ .Name }} task_family - (required) This will be the TaskDefinition Family Name Default Default (with Stage) Raw {PROJECT}-{TASK} {PROJECT}-{STAGE}-{TASK} {{ .Project }}{{ if .Stage }}-{{ .Stage }}{{end}}-{{ .Name }} schedule_group - (required) The Schedule Group name when creating CronJobs Default Default (with Stage) Raw {PROJECT} {PROJECT}-{STAGE} {{ .Project }}{{ if .Stage }}-{{ .Stage }}{{end}} schedule - (required) The schedule name when creating CronJobs Default Default (with Stage) Raw ecsd-cron-{PROJECT}-{TASK} ecsd-cron-{PROJECT}-{STAGE}-{TASK} ecsd-cron-{{ .Project }}{{ if .Stage }}-{{ .Stage }}{{end}}-{{ .Name }} cron_group This is the 'Group' field when a task is run via a cron job. If you have special tracking of this field, you can enter a value here If you enter something that evaluates to an empty string, then the group field will not be included. Default Default (with Stage) Raw ecsd:{PROJECT}:cron:{TASK} ecsd:{PROJECT}:{STAGE}:cron:{TASK} ecsd:{{ .Project }}{{ if .Stage }}:{{ .Stage }}{{end}}:cron:{{ .Name }} predeploy_group Same as the cron_group , this is only used when predeploy tasks are run If you enter something that evaluates to an empty string, then the group field will not be included. Default Default (with Stage) Raw ecsd:{PROJECT}:pd:{TASK} ecsd:{PROJECT}:{STAGE}:pd:{TASK} ecsd:{{ .Project }}{{ if .Stage }}:{{ .Stage }}{{end}}:pd:{{ .Name }} predeploy_started_by This is the 'StartedBy' field on RunTask. If you enter something that evaluates to an empty string, then the group field will not be included. Default Default (with Stage) Raw ecsd:{PROJECT}:deployer ecsd:{PROJECT}:{STAGE}:deployer ecsd:{{ .Project }}{{ if .Stage }}:{{ .Stage }}{{end}}:deployer marker_tag_key - (required) The marker tag is something added to all resources created by the deployer. This allows the deployer to delete resources that it created, but that have since been removed from the deployment configuration file. Once you deploy a project, you should not modify the values used for the marker tag. Default Default (with Stage) Raw ecsdeployer/project ecsdeployer/project ecsdeployer/project marker_tag_value - (required) Value used for the tag defined by marker_tag_key Default Default (with Stage) Raw {PROJECT} {PROJECT}/{STAGE} {{ .Project }}{{ if .Stage }}/{{ .Stage }}{{end}}","title":"Fields"},{"location":"config/network/","text":"Network Config \u00b6 Tasks running on Fargate must be launched within a VPC Subnet. The network configuration block will allow you to specify which subnets and security groups will be Usage \u00b6 network : subnets : - subnet-00000000000 - subnet-11111111111 - name : state values : - available - name : tag:cloud87/subnet_class value : host security_groups : - sg-1234567890 - sg-9876543210 - name : group-name values : [ \"cloud87-ecs\" ] public_ip : false Fields \u00b6 subnets Specify SubnetIDs or a list of filters that can be used to locate the desired Subnets. For more information: Specifying Filters (below) AWS Subnet Filter Values security_groups Specify SecurityGroupIDs or a list of filters that can be used to locate the desired SecurityGroups. For more information: Specifying Filters (below) AWS Security Group Filter Values public_ip Whether or not this task should be giving a public IP address. Default : false Specifying Filters \u00b6 Filters are specified using a list of filter objects. Each object should have the following structure: name - (required) The \"Name\" of the filter to use. Possible names dependent on whether you are using it for SecurityGroups or Subnets. You can view possible values for filter names at: Subnet Filters Security Group Filters values - (required) The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR, and the request returns all results that match any of the specified values. Single Value Multi Value network : subnets : - name : vpc-id values : vpc-1234567 network : subnets : - name : availability-zones values : - us-east-1a - us-east-1b - us-east-1c Filter Reference \u00b6 Subnet Filters Security Group Filters AWS EC2 API::Filter","title":"Networking"},{"location":"config/network/#network-config","text":"Tasks running on Fargate must be launched within a VPC Subnet. The network configuration block will allow you to specify which subnets and security groups will be","title":"Network Config"},{"location":"config/network/#usage","text":"network : subnets : - subnet-00000000000 - subnet-11111111111 - name : state values : - available - name : tag:cloud87/subnet_class value : host security_groups : - sg-1234567890 - sg-9876543210 - name : group-name values : [ \"cloud87-ecs\" ] public_ip : false","title":"Usage"},{"location":"config/network/#fields","text":"subnets Specify SubnetIDs or a list of filters that can be used to locate the desired Subnets. For more information: Specifying Filters (below) AWS Subnet Filter Values security_groups Specify SecurityGroupIDs or a list of filters that can be used to locate the desired SecurityGroups. For more information: Specifying Filters (below) AWS Security Group Filter Values public_ip Whether or not this task should be giving a public IP address. Default : false","title":"Fields"},{"location":"config/network/#specifying-filters","text":"Filters are specified using a list of filter objects. Each object should have the following structure: name - (required) The \"Name\" of the filter to use. Possible names dependent on whether you are using it for SecurityGroups or Subnets. You can view possible values for filter names at: Subnet Filters Security Group Filters values - (required) The filter values. Filter values are case-sensitive. If you specify multiple values for a filter, the values are joined with an OR, and the request returns all results that match any of the specified values. Single Value Multi Value network : subnets : - name : vpc-id values : vpc-1234567 network : subnets : - name : availability-zones values : - us-east-1a - us-east-1b - us-east-1c","title":"Specifying Filters"},{"location":"config/network/#filter-reference","text":"Subnet Filters Security Group Filters AWS EC2 API::Filter","title":"Filter Reference"},{"location":"config/predeploy/","text":"PreDeploy Tasks \u00b6 PreDeploy tasks are tasks that are run sequentially before your services are deployed. Tasks must succeed, otherwise the whole deployment will be halted. predeploy : - name : migrations command : [ \"bundle\" , \"exec\" , \"rake\" , \"db:migrate\" ] - name : warm-caches command : [ \"bundle\" , \"exec\" , \"rake\" , \"caches:warm\" ] Fields \u00b6 name - (required) Name for your task. This should be short. This name must be unique across all services, tasks, cronjobs, predeploys command - (recommended) The command you want to run for this task. This field is not required, but it doesn't make much sense to exclude it. For details on how to specify a command, see Specifying Command/EntryPoints timeout Set a custom timeout for this task. if the task does not complete within the allotted time, it will be killed and considered as a failure. Note: this is the total launch time + runtime. so if you have a massive image, that will count against the timeout Default : inherit from settings.predeploy_timeout disabled Skip running this task. This allows you to easily skip certain tasks while still keeping them in the configuration Default : false ignore_failure If you want to run a task, but do not care if it fails, then set this to true. Usually you will not want this. Default : false <anything from common> See Common Task Options .","title":"PreDeploy Tasks"},{"location":"config/predeploy/#predeploy-tasks","text":"PreDeploy tasks are tasks that are run sequentially before your services are deployed. Tasks must succeed, otherwise the whole deployment will be halted. predeploy : - name : migrations command : [ \"bundle\" , \"exec\" , \"rake\" , \"db:migrate\" ] - name : warm-caches command : [ \"bundle\" , \"exec\" , \"rake\" , \"caches:warm\" ]","title":"PreDeploy Tasks"},{"location":"config/predeploy/#fields","text":"name - (required) Name for your task. This should be short. This name must be unique across all services, tasks, cronjobs, predeploys command - (recommended) The command you want to run for this task. This field is not required, but it doesn't make much sense to exclude it. For details on how to specify a command, see Specifying Command/EntryPoints timeout Set a custom timeout for this task. if the task does not complete within the allotted time, it will be killed and considered as a failure. Note: this is the total launch time + runtime. so if you have a massive image, that will count against the timeout Default : inherit from settings.predeploy_timeout disabled Skip running this task. This allows you to easily skip certain tasks while still keeping them in the configuration Default : false ignore_failure If you want to run a task, but do not care if it fails, then set this to true. Usually you will not want this. Default : false <anything from common> See Common Task Options .","title":"Fields"},{"location":"config/services/","text":"Services \u00b6 Services are defined as a list of objects under the services key. Example \u00b6 services : # A web server that is attached to a target group - name : web desired : 3 command : [ \"bundle\" , \"exec\" , \"puma\" , \"-c\" , \"config/puma.rb\" ] load_balancer : target_group : c87-deployer-test-web port : 5000 # A background worker # or some other service that does not need a load balancer - name : worker desired : 5 command : [ \"bundle\" , \"exec\" , \"sidekiq\" ] Fields \u00b6 name - (required) Name for your service. This should be short. This name must be unique across all services, tasks, cronjobs, predeploys desired - (required) The number of containers you wish to deploy for this service. To disable a service, set this to 0 . Default : 0 (disabled) command The command you want to run for this service. This field is not required, but it doesn't make much sense to exclude it. For details on how to specify a command, see Specifying Command/EntryPoints load_balancer Connect your service to a load balancer. See Load Balancer below for more information. rollout You can customize how the rollout process is performed if you want. Normally, you should just leave this key out of your configuration and an ideal rollout configuration will be provided See Rollout Configuration below for more information. spot Allows you to override the Spot Configuration for this single service. skip_wait_for_stable If set to true, then the deployer will make no attempt to wait for this service to be stable before marking the deployment successful. You probably do not want to set this to true unless you have a service that takes really really long to reach stability Default : false <anything from common> See Common Task Options . Load Balancer \u00b6 port - (required) The port to route traffic to for the target group. target_group - (required) The target group to connect this service to. You can specify either the name or the ARN. If you specify the name then the deployer will lookup the correct ARN grace Optional health check grace period. If your app takes a long time to boot up before it can serve traffic, then you can set a grace period so that the load balancer does not kill it while it is still booting. Specify as integer seconds or a duration Default : use AWS default If you require multiple load balancers on a single service, you can define this block as an array to add multiple. (This is uncommon) Rollout Configuration \u00b6 You can specify the minimum and maximum percentages that should be possible during a deployment. By default this will be configured for you with sensible defaults. min - (required) Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment. max - (required) Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment For more information, take a look at the AWS ECS Deployment Configuration .","title":"Services"},{"location":"config/services/#services","text":"Services are defined as a list of objects under the services key.","title":"Services"},{"location":"config/services/#example","text":"services : # A web server that is attached to a target group - name : web desired : 3 command : [ \"bundle\" , \"exec\" , \"puma\" , \"-c\" , \"config/puma.rb\" ] load_balancer : target_group : c87-deployer-test-web port : 5000 # A background worker # or some other service that does not need a load balancer - name : worker desired : 5 command : [ \"bundle\" , \"exec\" , \"sidekiq\" ]","title":"Example"},{"location":"config/services/#fields","text":"name - (required) Name for your service. This should be short. This name must be unique across all services, tasks, cronjobs, predeploys desired - (required) The number of containers you wish to deploy for this service. To disable a service, set this to 0 . Default : 0 (disabled) command The command you want to run for this service. This field is not required, but it doesn't make much sense to exclude it. For details on how to specify a command, see Specifying Command/EntryPoints load_balancer Connect your service to a load balancer. See Load Balancer below for more information. rollout You can customize how the rollout process is performed if you want. Normally, you should just leave this key out of your configuration and an ideal rollout configuration will be provided See Rollout Configuration below for more information. spot Allows you to override the Spot Configuration for this single service. skip_wait_for_stable If set to true, then the deployer will make no attempt to wait for this service to be stable before marking the deployment successful. You probably do not want to set this to true unless you have a service that takes really really long to reach stability Default : false <anything from common> See Common Task Options .","title":"Fields"},{"location":"config/services/#load-balancer","text":"port - (required) The port to route traffic to for the target group. target_group - (required) The target group to connect this service to. You can specify either the name or the ARN. If you specify the name then the deployer will lookup the correct ARN grace Optional health check grace period. If your app takes a long time to boot up before it can serve traffic, then you can set a grace period so that the load balancer does not kill it while it is still booting. Specify as integer seconds or a duration Default : use AWS default If you require multiple load balancers on a single service, you can define this block as an array to add multiple. (This is uncommon)","title":"Load Balancer"},{"location":"config/services/#rollout-configuration","text":"You can specify the minimum and maximum percentages that should be possible during a deployment. By default this will be configured for you with sensible defaults. min - (required) Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment. max - (required) Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment For more information, take a look at the AWS ECS Deployment Configuration .","title":"Rollout Configuration"},{"location":"config/settings/","text":"Settings \u00b6 This allows you to override specific settings used in the deployer. For the most part, you should never need to modify these. Example \u00b6 settings : predeploy_timeout : 90m skip_deployment_env_vars : false ssm_import : /path/to/project/secrets Fields \u00b6 ssm_import See SSM Parameter Store Secrets Import It is highly recommended you enable this! Default : disabled (see SSM Parameter Store Secrets Import for defaults) predeploy_timeout The maximum time that a predeploy task may take to run. This is the default time, and can be overridden on a per-task basis. Default : 5400 (seconds) skip_cron_env_vars This will prevent the extra environment variables from being added to your cron jobs. For a list of env vars, see Cron Env Vars . Default : false skip_deployment_env_vars This will prevent the extra deployment environment variables from being added to your application. These are things like ECSDEPLOYER_IMAGE_TAG , ECSDEPLOYER_PROJECT , etc. For a list of env vars, see Deployment Env Vars . Default : false disable_marker_tag This will disable the creation of the marker tag used by the deployer to track resources it creates. Disabling the marker tag also requires you to set keep_in_sync to false It's recommended you do not disable this Default : false (Marker tag will be used) use_old_cron_eventbus Use the old and deprecated method of creating CronJobs. The new method uses EventBridge Scheduler, which is much better. This option is only really for legacy deployments that still use EventBridge targets/rules. You should not use this. Default : false (Will use the newer EventBridge Scheduler) keep_in_sync See Keeping Resources In-Sync wait_for_stable See Service Stability Waiter SSM Parameter Store Secrets Import \u00b6 By default, this feature is disabled , but is highly recommended. It will automatically look for environment variables in a specific path on AWS Parameter Store . It's highly recommended that you use SSM Parameter Store to put sensitive values, rather than in plaintext. Shorthand Enabling Advanced Configuration settings : ssm_import : /path/to/project/parameters This will enable SSM Secrets Importing, and will set the path as provided. settings : ssm_import : enabled : true path : /path/to/project/parameters enabled Enable importing secrets from SSM Parameter Default : false path This is the path prefix that will be searched to automatically add environment variables to your applications. If you do not want SSM Secrets, then set this to a blank string Default Default (with Stage) Raw /ecsdeployer/secrets/{PROJECT} /ecsdeployer/secrets/{PROJECT}/{STAGE} /ecsdeployer/secrets/{{ .Project }}{{ if .Stage }}/{{ .Stage }}{{ end }} recursive If you have multiple levels of parameters nested underneath the path provided above, then you will want to enable recursive import. If you do not, then some parameters will be ignored. Default : true Keeping Resources In-Sync \u00b6 Important This feature is reliant upon the Marker Tag . If you modify or change the tag or value, then any resources using that tag will be \"invisible\" to the Deployer. Enable (default) Disable (not recommended) Customize settings : keep_in_sync : true settings : keep_in_sync : false Warning: Not recommended If you disable this, then you are responsible for deleting unused services, cronjobs, task definitions, etc. This means that services that you remove from the environment file will still be running old code after deploy. settings : keep_in_sync : services : true cronjobs : false log_retention : true task_definitions : true services Removes services that no longer appear in the config file cronjobs Removes cronjobs that no longer appear in the config file log_retention Will update existing log groups to have the correct retention setting task_definitions Deregister any task definitions that point to tasks/services/crons that are no longer listed in the config file. Service Stability Waiter \u00b6 By default, the deployer will wait for your services to become stable according to ECS. If you do not want to wait, or need to customize that behavior, then you can do that here. Shorthand to disable waiter (not recommended) settings : wait_for_stable : false disabled Disable the waiter. Deployment will succeed immediately after services have been updated. (Regardless of if they actually work / are not in a crash loop). Default : false timeout How long should the deployer wait for a service to become stable Default : 1800 (seconds) Deployment Env Vars \u00b6 Variable Name Template ECSDEPLOYER_APP_VERSION {{ .Version }} ECSDEPLOYER_DEPLOYED_AT {{ .Date }} ECSDEPLOYER_IMAGE_TAG {{ .ImageTag }} ECSDEPLOYER_PROJECT {{ .Project }} ECSDEPLOYER_STAGE {{ .Stage }} ECSDEPLOYER_TASK_NAME {{ .Name }} Any values that evaluate to a blank string will not be added to your environment. Cron Env Vars \u00b6 These are only added to cron jobs. Values are EventBridge Scheduler context attributes Variable Name Template ECSDEPLOYER_CRON_SCHEDULE_ARN <aws.scheduler.schedule-arn> ECSDEPLOYER_CRON_SCHEDULED_TIME <aws.scheduler.scheduled-time> ECSDEPLOYER_CRON_EXECUTION_ID <aws.scheduler.execution-id> ECSDEPLOYER_CRON_ATTEMPT <aws.scheduler.attempt-number>","title":"Settings"},{"location":"config/settings/#settings","text":"This allows you to override specific settings used in the deployer. For the most part, you should never need to modify these.","title":"Settings"},{"location":"config/settings/#example","text":"settings : predeploy_timeout : 90m skip_deployment_env_vars : false ssm_import : /path/to/project/secrets","title":"Example"},{"location":"config/settings/#fields","text":"ssm_import See SSM Parameter Store Secrets Import It is highly recommended you enable this! Default : disabled (see SSM Parameter Store Secrets Import for defaults) predeploy_timeout The maximum time that a predeploy task may take to run. This is the default time, and can be overridden on a per-task basis. Default : 5400 (seconds) skip_cron_env_vars This will prevent the extra environment variables from being added to your cron jobs. For a list of env vars, see Cron Env Vars . Default : false skip_deployment_env_vars This will prevent the extra deployment environment variables from being added to your application. These are things like ECSDEPLOYER_IMAGE_TAG , ECSDEPLOYER_PROJECT , etc. For a list of env vars, see Deployment Env Vars . Default : false disable_marker_tag This will disable the creation of the marker tag used by the deployer to track resources it creates. Disabling the marker tag also requires you to set keep_in_sync to false It's recommended you do not disable this Default : false (Marker tag will be used) use_old_cron_eventbus Use the old and deprecated method of creating CronJobs. The new method uses EventBridge Scheduler, which is much better. This option is only really for legacy deployments that still use EventBridge targets/rules. You should not use this. Default : false (Will use the newer EventBridge Scheduler) keep_in_sync See Keeping Resources In-Sync wait_for_stable See Service Stability Waiter","title":"Fields"},{"location":"config/settings/#ssm-import","text":"By default, this feature is disabled , but is highly recommended. It will automatically look for environment variables in a specific path on AWS Parameter Store . It's highly recommended that you use SSM Parameter Store to put sensitive values, rather than in plaintext. Shorthand Enabling Advanced Configuration settings : ssm_import : /path/to/project/parameters This will enable SSM Secrets Importing, and will set the path as provided. settings : ssm_import : enabled : true path : /path/to/project/parameters enabled Enable importing secrets from SSM Parameter Default : false path This is the path prefix that will be searched to automatically add environment variables to your applications. If you do not want SSM Secrets, then set this to a blank string Default Default (with Stage) Raw /ecsdeployer/secrets/{PROJECT} /ecsdeployer/secrets/{PROJECT}/{STAGE} /ecsdeployer/secrets/{{ .Project }}{{ if .Stage }}/{{ .Stage }}{{ end }} recursive If you have multiple levels of parameters nested underneath the path provided above, then you will want to enable recursive import. If you do not, then some parameters will be ignored. Default : true","title":"SSM Parameter Store Secrets Import"},{"location":"config/settings/#keeping-in-sync","text":"Important This feature is reliant upon the Marker Tag . If you modify or change the tag or value, then any resources using that tag will be \"invisible\" to the Deployer. Enable (default) Disable (not recommended) Customize settings : keep_in_sync : true settings : keep_in_sync : false Warning: Not recommended If you disable this, then you are responsible for deleting unused services, cronjobs, task definitions, etc. This means that services that you remove from the environment file will still be running old code after deploy. settings : keep_in_sync : services : true cronjobs : false log_retention : true task_definitions : true services Removes services that no longer appear in the config file cronjobs Removes cronjobs that no longer appear in the config file log_retention Will update existing log groups to have the correct retention setting task_definitions Deregister any task definitions that point to tasks/services/crons that are no longer listed in the config file.","title":"Keeping Resources In-Sync"},{"location":"config/settings/#service-stability-waiter","text":"By default, the deployer will wait for your services to become stable according to ECS. If you do not want to wait, or need to customize that behavior, then you can do that here. Shorthand to disable waiter (not recommended) settings : wait_for_stable : false disabled Disable the waiter. Deployment will succeed immediately after services have been updated. (Regardless of if they actually work / are not in a crash loop). Default : false timeout How long should the deployer wait for a service to become stable Default : 1800 (seconds)","title":"Service Stability Waiter"},{"location":"config/settings/#deployment-env-vars","text":"Variable Name Template ECSDEPLOYER_APP_VERSION {{ .Version }} ECSDEPLOYER_DEPLOYED_AT {{ .Date }} ECSDEPLOYER_IMAGE_TAG {{ .ImageTag }} ECSDEPLOYER_PROJECT {{ .Project }} ECSDEPLOYER_STAGE {{ .Stage }} ECSDEPLOYER_TASK_NAME {{ .Name }} Any values that evaluate to a blank string will not be added to your environment.","title":"Deployment Env Vars"},{"location":"config/settings/#cron-env-vars","text":"These are only added to cron jobs. Values are EventBridge Scheduler context attributes Variable Name Template ECSDEPLOYER_CRON_SCHEDULE_ARN <aws.scheduler.schedule-arn> ECSDEPLOYER_CRON_SCHEDULED_TIME <aws.scheduler.scheduled-time> ECSDEPLOYER_CRON_EXECUTION_ID <aws.scheduler.execution-id> ECSDEPLOYER_CRON_ATTEMPT <aws.scheduler.attempt-number>","title":"Cron Env Vars"},{"location":"config/sidecars/","text":"Sidecars \u00b6 Usage \u00b6 task_defaults : sidecars : - name : datadog-agent image : public.ecr.aws/datadog/agent:latest cpu : 128 memory : 512 environment : DD_API_KEY : ssm : /secrets/global/DD_API_KEY ECS_FARGATE : true Fields \u00b6 name - (required) Name for your task. This should be short. This name must be unique across all services, tasks, cronjobs, sidecarss inherit_env By default, a sidecar will not inherit the environment variables from the primary container. If you want all environment variables on the primary container to be copied to the sidecar, set this to true . If you also specify environment variables for this container, those will override any environment variables inherited from the primary container. Default : false essential Mark this container as essential (or not essential). A non-essential container can die without the task as a whole being considered unhealthy. Default : true port_mappings A list of container ports to expose on the task. See Specifying Port Mappings below for the required format. memory_reservation You can specify a memory reservation (minimum) if you want to allow your sidecar to use more memory if available. You can specify this in the same format as memory , but you cannot use multiplier values. <most things from common> You can use any container level property from Common Task Options . This would exclude things that only apply at the task level (network, tags, arch). Specifying Port Mappings \u00b6 Shorthand Detailed port_mappings : - 8080 # protocol is assumed as tcp - 1234/tcp - 5000/udp port_mappings : - port : 1234 protocol : tcp - port : 5678 protocol : udp port - (required) The port number to open. Must be between 1 and 65535. protocol The protocol for the mapping. Default : tcp","title":"Sidecars"},{"location":"config/sidecars/#sidecars","text":"","title":"Sidecars"},{"location":"config/sidecars/#usage","text":"task_defaults : sidecars : - name : datadog-agent image : public.ecr.aws/datadog/agent:latest cpu : 128 memory : 512 environment : DD_API_KEY : ssm : /secrets/global/DD_API_KEY ECS_FARGATE : true","title":"Usage"},{"location":"config/sidecars/#fields","text":"name - (required) Name for your task. This should be short. This name must be unique across all services, tasks, cronjobs, sidecarss inherit_env By default, a sidecar will not inherit the environment variables from the primary container. If you want all environment variables on the primary container to be copied to the sidecar, set this to true . If you also specify environment variables for this container, those will override any environment variables inherited from the primary container. Default : false essential Mark this container as essential (or not essential). A non-essential container can die without the task as a whole being considered unhealthy. Default : true port_mappings A list of container ports to expose on the task. See Specifying Port Mappings below for the required format. memory_reservation You can specify a memory reservation (minimum) if you want to allow your sidecar to use more memory if available. You can specify this in the same format as memory , but you cannot use multiplier values. <most things from common> You can use any container level property from Common Task Options . This would exclude things that only apply at the task level (network, tags, arch).","title":"Fields"},{"location":"config/sidecars/#specifying-port-mappings","text":"Shorthand Detailed port_mappings : - 8080 # protocol is assumed as tcp - 1234/tcp - 5000/udp port_mappings : - port : 1234 protocol : tcp - port : 5678 protocol : udp port - (required) The port number to open. Must be between 1 and 65535. protocol The protocol for the mapping. Default : tcp","title":"Specifying Port Mappings"},{"location":"config/spot/","text":"Spot Configuration \u00b6 To reduce the running costs of your application, you can easily launch containers using Fargate Spot . Make sure your application can handle Spot containers Spot containers maybe terminated at any time, and you are only given 2 minutes notice before a task is killed. Containers will properly drain connections, so web applications will not suddenly throw errors to clients. If your application cannot handle tasks being killed suddenly (or you need the stability of a long running container), then do not enable Spot. Read the Fargate Spot documentation Please read the Fargate Spot Documentation to make sure you understand any caveats. Fargate Spot (as of Oct 2022) does not support ARM64 architecture Enabling for entire application \u00b6 task_defaults : spot : enabled : true Note : Fargate Spot is not used for CronJobs , PreDeploy Tasks , or Remote Shell . It is only used for Services . Overriding a specific service \u00b6 For services, you can override any of the spot configurations for that specific service. The parameters are the same as for the entire application, but you just need to put the block on the service. Example project : example task_defaults : spot : enabled : true minimum_ondemand : 0 services : - name : web # ... spot : minimum_ondemand : 5 Advanced Capacity \u00b6 You can also enable Spot containers, while still keeping a baseline (and/or a percentage) of your containers using OnDemand pricing. task_defaults : spot : enabled : true minimum_ondemand : 1 minimum_ondemand_percent : 25 Configuration Fields \u00b6 enabled Enable Spot. If spot is disabled then the remaining configuration is irrelevant. Default : false (spot is disabled by default) minimum_ondemand The minimum number of containers that should use OnDemand containers. This is equivalent to the base field on CapacityProviderStategyItem . Default : 0 (do not set an OnDemand baseline) minimum_ondemand_percent Once the 'minimum_ondemand' count is met, what percentage of your service should be using OnDemand containers? This is equivalent to the weight field on CapacityProviderStategyItem . Default : 0 See Also: API CapacityProviderStategyItem AWS Capacity Providers","title":"Spot Containers"},{"location":"config/spot/#spot-configuration","text":"To reduce the running costs of your application, you can easily launch containers using Fargate Spot . Make sure your application can handle Spot containers Spot containers maybe terminated at any time, and you are only given 2 minutes notice before a task is killed. Containers will properly drain connections, so web applications will not suddenly throw errors to clients. If your application cannot handle tasks being killed suddenly (or you need the stability of a long running container), then do not enable Spot. Read the Fargate Spot documentation Please read the Fargate Spot Documentation to make sure you understand any caveats. Fargate Spot (as of Oct 2022) does not support ARM64 architecture","title":"Spot Configuration"},{"location":"config/spot/#enabling-for-entire-application","text":"task_defaults : spot : enabled : true Note : Fargate Spot is not used for CronJobs , PreDeploy Tasks , or Remote Shell . It is only used for Services .","title":"Enabling for entire application"},{"location":"config/spot/#overriding-a-specific-service","text":"For services, you can override any of the spot configurations for that specific service. The parameters are the same as for the entire application, but you just need to put the block on the service. Example project : example task_defaults : spot : enabled : true minimum_ondemand : 0 services : - name : web # ... spot : minimum_ondemand : 5","title":"Overriding a specific service"},{"location":"config/spot/#advanced-capacity","text":"You can also enable Spot containers, while still keeping a baseline (and/or a percentage) of your containers using OnDemand pricing. task_defaults : spot : enabled : true minimum_ondemand : 1 minimum_ondemand_percent : 25","title":"Advanced Capacity"},{"location":"config/spot/#configuration-fields","text":"enabled Enable Spot. If spot is disabled then the remaining configuration is irrelevant. Default : false (spot is disabled by default) minimum_ondemand The minimum number of containers that should use OnDemand containers. This is equivalent to the base field on CapacityProviderStategyItem . Default : 0 (do not set an OnDemand baseline) minimum_ondemand_percent Once the 'minimum_ondemand' count is met, what percentage of your service should be using OnDemand containers? This is equivalent to the weight field on CapacityProviderStategyItem . Default : 0 See Also: API CapacityProviderStategyItem AWS Capacity Providers","title":"Configuration Fields"},{"location":"config/tags/","text":"Tags \u00b6 Tags are defined globally, as a list of objects under the tags key. Each tag has 2 required fields: name and value . These 2 fields are always interpreted as strings. You can also use template values in both fields. Tip If either the name or the value evaluates to an empty string, then that tag will not be added. You can use this to condition your tags. Example Tag Declaration tags : - name : cloud87/billable value : true - name : cloud87/application value : \"{{ .Project }}\" - name : \"cloud87/{{.Project}}/tag\" value : \"{{ .ImageTag }}\" Fields \u00b6 name - (required) The name or key for the tag. You may use template clauses in this field. value - (required) The value for the tag. You may use template clauses in this field.","title":"Tags"},{"location":"config/tags/#tags","text":"Tags are defined globally, as a list of objects under the tags key. Each tag has 2 required fields: name and value . These 2 fields are always interpreted as strings. You can also use template values in both fields. Tip If either the name or the value evaluates to an empty string, then that tag will not be added. You can use this to condition your tags. Example Tag Declaration tags : - name : cloud87/billable value : true - name : cloud87/application value : \"{{ .Project }}\" - name : \"cloud87/{{.Project}}/tag\" value : \"{{ .ImageTag }}\"","title":"Tags"},{"location":"config/tags/#fields","text":"name - (required) The name or key for the tag. You may use template clauses in this field. value - (required) The value for the tag. You may use template clauses in this field.","title":"Fields"},{"location":"config/volumes/","text":"Volumes and Mounts \u00b6 Volumes are specified at the task level. The recommended place to specify all your volumes is within the task_defaults block. Any volumes that are not referenced within a task's containers will be ignored and not included in the task definition. This means you can specify all possible volumes within the task defaults and just reference them in various containers using mount points. Example Usage \u00b6 Using Elastic File System Using Bind Volumes task_defaults : volumes : - name : archive efs : file_system_id : fs-1234567 access_point_id : fsap-abc12345 mounts : - path : /mnt/archive source : archive task_defaults : volumes : - name : bindvol - other-bind-vol # short hand mounts : - path : /mnt/shared source : bindvol - path : /mnt/roshared source : other-bind-vol readonly : true Specifying Volumes \u00b6 Volumes are specified as an array of objects with the following fields: name - (required) The name of the volume. efs Adding this block marks this as an EFS Volume reference. See EFS Volumes below for details. EFS Volumes \u00b6 file_system_id - (required) The ID of the EFS file system you want to reference. access_point_id - (recommended) The EFS Access Point ID . This is the recommended way of using an EFS volume. root The directory within the EFS file system to mount as the root directory inside the host. Do not specify this if you are using an AccessPoint. disable_iam Disable using the task's role when mounting the EFS Volume. Default : false disable_encryption Disable encryption for data in transit. Encryption is required if you use IAM or access_point_id are set. You should leave encryption enabled, always. There's no good reason to disable encryption. Default : false Specifying Mount Points \u00b6 Mounts specified at the task level will be applied to the primary container only. If you need to use a mount in a sidecar container, you will need to specify it within the sidecar object. path - (required) The path inside the container where this volume will be mounted. source - (required) The name of the volume that this mount references. Must match the name used when declaring the volume. readonly Whether to mount the volume as read-only. Default : false See Also \u00b6 Using Data Volumes EFS Volumes Bind Mounts Working with Access Points","title":"Volumes"},{"location":"config/volumes/#volumes-and-mounts","text":"Volumes are specified at the task level. The recommended place to specify all your volumes is within the task_defaults block. Any volumes that are not referenced within a task's containers will be ignored and not included in the task definition. This means you can specify all possible volumes within the task defaults and just reference them in various containers using mount points.","title":"Volumes and Mounts"},{"location":"config/volumes/#example-usage","text":"Using Elastic File System Using Bind Volumes task_defaults : volumes : - name : archive efs : file_system_id : fs-1234567 access_point_id : fsap-abc12345 mounts : - path : /mnt/archive source : archive task_defaults : volumes : - name : bindvol - other-bind-vol # short hand mounts : - path : /mnt/shared source : bindvol - path : /mnt/roshared source : other-bind-vol readonly : true","title":"Example Usage"},{"location":"config/volumes/#specifying-volumes","text":"Volumes are specified as an array of objects with the following fields: name - (required) The name of the volume. efs Adding this block marks this as an EFS Volume reference. See EFS Volumes below for details.","title":"Specifying Volumes"},{"location":"config/volumes/#efs-volumes","text":"file_system_id - (required) The ID of the EFS file system you want to reference. access_point_id - (recommended) The EFS Access Point ID . This is the recommended way of using an EFS volume. root The directory within the EFS file system to mount as the root directory inside the host. Do not specify this if you are using an AccessPoint. disable_iam Disable using the task's role when mounting the EFS Volume. Default : false disable_encryption Disable encryption for data in transit. Encryption is required if you use IAM or access_point_id are set. You should leave encryption enabled, always. There's no good reason to disable encryption. Default : false","title":"EFS Volumes"},{"location":"config/volumes/#specifying-mount-points","text":"Mounts specified at the task level will be applied to the primary container only. If you need to use a mount in a sidecar container, you will need to specify it within the sidecar object. path - (required) The path inside the container where this volume will be mounted. source - (required) The name of the volume that this mount references. Must match the name used when declaring the volume. readonly Whether to mount the volume as read-only. Default : false","title":"Specifying Mount Points"},{"location":"config/volumes/#see-also","text":"Using Data Volumes EFS Volumes Bind Mounts Working with Access Points","title":"See Also"}]}